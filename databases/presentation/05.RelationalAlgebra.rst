
Основы реляционной алгебры
=============================

----

    Реляционная алгебра базируется на теории множеств и является основой логики работы баз данных. 

    Основы теории реляционных баз данных, равно как и операции реляционной алгебры, были предложены Эдгаром Коддом во время работы в компании IBM

.. image:: https://upload.wikimedia.org/wikipedia/ru/5/58/Edgar_F_Codd.jpg


----

Операции реляционной алгебры
============================

Основные восемь операций реляционной алгебры: 
---------------------------------------------

Традиционные операции над множествами:

- Объединение_
- Пересечение_
- Вычитание_
- Декартово произведение_

Специальные реляционные операции:

- Выборка_
- Проекция_
- Соединение_
- Деление_

Результатом любой операции алгебры над отношениями **является еще одно отношение**, которое можно потом так же использовать в других операциях.

----

Проекция
========

.. _Проекция:

Проекция является операцией, при которой из отношения выделяются атрибуты только из указанных доменов, то есть из таблицы выбираются только нужные столбцы, при этом, если получится несколько одинаковых кортежей, то в результирующем отношении остается только по одному экземпляру подобного кортежа.

.. Пример

Таблица People

====== ==== =======
Name	Age	Weight
====== ==== =======
Harry	34	80

Sally	28	64

George	29	70

Peter	34	80
====== ==== =======

Результат проекции: **π**\ :sub:`(Age, Weight)`\ People

=== ======
Age	Weight
=== ======
28	64

29	70

34	80
=== ======

Эквивалентный SQL-запрос:

.. sourcecode:: sql

    SELECT DISTINCT Age, Weight FROM People;

Примечательно, что в SQL для полного соответствия операции проекции необходимо указывать ключевое слово DISTINCT, поскольку без него строка с возрастом 34 и весом 80 отобразится дважды, что отличается от результата реляционной операции проекции1.


----

Выборка
=======

Выборка — это операция, которая выделяет множество строк в таблице, удовлетворяющих заданным условиям. 

Условием может быть любое логическое выражение. 

Пример
------

Таблица People

====== ==== =======
Name	Age	Weight
====== ==== =======
Harry	34	80

Sally	28	64

George	29	70

Helena	54	54

Peter	34	80
====== ==== =======


Результаты выборки: **σ**\ :sub:`(Age≥34)`\ People

====== ==== =======
Name	Age	Weight
====== ==== =======
Harry	34	80

Helena	54	54

Peter	34	80
====== ==== =======

Эквивалентный SQL-запрос:

.. sourcecode:: sql

    SELECT * FROM People WHERE Age >= 34;

----

Выборка и проекция
==================

Совместим операторы проекции и выборки. Мы можем это сделать, потому что любой из операторов в результате возвращает отношение и в качестве аргументов использует также отношение.

Исходная таблица People

+----+--------+-----+--------+
| id | name   | age | weight |
+====+========+=====+========+
|  1 | Harry  |  34 |     80 |
+----+--------+-----+--------+
|  2 | Sally  |  28 |     64 |
+----+--------+-----+--------+
|  3 | George |  29 |     70 |
+----+--------+-----+--------+
|  4 | Helena |  54 |     54 |
+----+--------+-----+--------+
|  5 | Peter  |  34 |     80 |
+----+--------+-----+--------+

Результаты выборки: **π**\ :sub:`(name, age)`\ **σ**\ :sub:`(age>50)`\ People

+--------+-----+
| name   | age |
+========+=====+
| Helena |  54 |
+--------+-----+

Эквивалентный SQL-запрос:

.. sourcecode:: sql

    SELECT name, age FROM People WHERE age > 50;

или

.. sourcecode:: sql
    
    SELECT name, age FROM (SELECT * FROM People WHERE age > 50) AS t;

----

Объединение
===========

Результатом объединения отношений A и B будет отношение с тем же заголовком, что и у совместимых по типу отношений A и B, и телом, состоящим из кортежей, принадлежащих или A, или B, или обоим отношениям.

.. image:: img/union.png

.. Пример объединения таблиц

Таблица People

+----+--------+-----+--------+
| id | name   | age | weight |
+====+========+=====+========+
|  1 | Harry  |  34 |     80 |
+----+--------+-----+--------+
|  2 | Sally  |  28 |     64 |
+----+--------+-----+--------+
|  3 | George |  29 |     70 |
+----+--------+-----+--------+
|  4 | Helena |  54 |     54 |
+----+--------+-----+--------+
|  5 | Peter  |  34 |     80 |
+----+--------+-----+--------+

Таблица Characters

+----+---------+-----+--------+
| id | name    | age | weight |
+====+=========+=====+========+
|  1 | Daffy   |  24 |     19 |
+----+---------+-----+--------+
|  2 | Donald  |  25 |     23 |
+----+---------+-----+--------+
|  3 | Scrooge |  81 |     27 |
+----+---------+-----+--------+

----

Результат объединения таблиц
============================

Объединенная таблица
--------------------

+----+---------+-----+--------+
| id | name    | age | weight |
+====+=========+=====+========+
|  1 | Harry   |  34 |     80 |
+----+---------+-----+--------+
|  2 | Sally   |  28 |     64 |
+----+---------+-----+--------+
|  3 | George  |  29 |     70 |
+----+---------+-----+--------+
|  4 | Helena  |  54 |     54 |
+----+---------+-----+--------+
|  5 | Peter   |  34 |     80 |
+----+---------+-----+--------+
|  1 | Daffy   |  24 |     19 |
+----+---------+-----+--------+
|  2 | Donald  |  25 |     23 |
+----+---------+-----+--------+
|  3 | Scrooge |  81 |     27 |
+----+---------+-----+--------+

Эквивалентный SQL запрос:

.. sourcecode:: sql

    SELECT * FROM People 
    UNION 
    SELECT * FROM Characters;
..

    Вопрос: как отсортировать результат объединения двух таблиц по возрасту?


.notes: :code:`SELECT * FROM People UNION SELECT * FROM Characters ORDER BY age;`

----

Пересечение
===========

Результатом пересечения отношений A и B будет отношение с тем же заголовком, что и у отношений A и B, и телом, состоящим из кортежей, принадлежащих одновременно обоим отношениям A и B.

.. image:: img/intersect.png

Таблица People

+----+--------+-----+--------+
| id | name   | age | weight |
+====+========+=====+========+
|  1 | Harry  |  34 |     80 |
+----+--------+-----+--------+
|  2 | Sally  |  28 |     64 |
+----+--------+-----+--------+
|  3 | George |  29 |     70 |
+----+--------+-----+--------+
|  4 | Helena |  54 |     54 |
+----+--------+-----+--------+
|  5 | Peter  |  34 |     80 |
+----+--------+-----+--------+

Таблица Characters

+----+---------+-----+--------+
| id | name    | age | weight |
+====+=========+=====+========+
|  1 | Daffy   |  24 |     19 |
+----+---------+-----+--------+
|  2 | Donald  |  25 |     23 |
+----+---------+-----+--------+
|  3 | Scrooge |  81 |     27 |
+----+---------+-----+--------+
|  4 | George  |  29 |     70 |
+----+---------+-----+--------+
|  5 | Sally   |  28 |     64 |
+----+---------+-----+--------+

----

Результат пересечения таблиц
============================

Пересечение таблиц
------------------

+--------+-----+--------+
| name   | age | weight |
+========+=====+========+
| Sally  |  28 |     64 |
+--------+-----+--------+
| George |  29 |     70 |
+--------+-----+--------+


Эквивалентный SQL запрос MSSQL и Access:

.. sourcecode:: sql

    TSQL> SELECT name, age, weight FROM People 
          INTERSECT 
          SELECT name, age, weight FROM Characters;

Эквивалентный запрос в MySql:

.. sourcecode:: sql

    -- mysql не поддерживает операцию INTERSECT 
   mysql> SELECT DISTINCT 
                   People.name AS name, 
                   People.age AS age, 
                   People.weight AS weight 
          FROM People 
          INNER JOIN Characters 
          USING(name, age, weight);

----

Вычитание
=========

Результатом разности отношений A и B будет отношение с тем же заголовком, что и у совместимых по типу отношений A и B, и телом, состоящим из кортежей, принадлежащих отношению A и не принадлежащих отношению B.

.. image:: img/except.png

----

Результат разности
==================

+--------+-----+--------+
| name   | age | weight |
+========+=====+========+
| Harry  |  34 |     80 |
+--------+-----+--------+
| Helena |  54 |     54 |
+--------+-----+--------+
| Peter  |  34 |     80 |
+--------+-----+--------+

Эквивалентный SQL запрос MSSQL и Access:

.. sourcecode:: sql
    
    TSQL> SELECT name, age, weight FROM People
          EXCEPT
          SELECT name, age, weight FROM Characters;

Эквивалентный запрос в MySql:

.. sourcecode:: sql

    -- mysql не поддерживает операцию EXCEPT
    mysql> SELECT DISTINCT 
                People.name AS name, 
                People.age AS age, 
                People.weight AS weight 
           FROM People 
           LEFT OUTER JOIN Characters 
           USING (name, age, weight) 
           WHERE Characters.name IS NULL;

----

Декартово произведение
======================

.. _произведение:

При выполнении прямого произведения двух отношений производится отношение, кортежи которого являются конкатенацией (сцеплением) кортежей первого и второго операндов.

Пусть даны соотношения (таблицы):

Таблица Cartoons

+------------+--------------+
| id_cartoon | name_cartoon |
+============+==============+
|          1 | The Simpsons |
+------------+--------------+
|          2 | Family Guy   |
+------------+--------------+

Таблица Channels

+-----------+-------------+
| id_channel| name_channel|
+===========+=============+
|         1 | 1+1         |
+-----------+-------------+
|         2 | СТБ         |
+-----------+-------------+

Результат произведения   Cartoons × Channels

+------------+--------------+-----------+-------------+
| id_cartoon | name_cartoon | id_channel| name_channel|
+============+==============+===========+=============+
|          1 | The Simpsons |         1 | 1+1         |
+------------+--------------+-----------+-------------+
|          2 | Family Guy   |         1 | 1+1         |
+------------+--------------+-----------+-------------+
|          1 | The Simpsons |         2 | СТБ         |
+------------+--------------+-----------+-------------+
|          2 | Family Guy   |         2 | СТБ         |
+------------+--------------+-----------+-------------+

----

Декартово произведение
======================

Эквивалентный SQL запрос:

.. sourcecode:: sql

    SELECT * FROM Cartoons, Channels;

Альтернативный запрос:

.. sourcecode:: sql

    SELECT * FROM Cartoons CROSS JOIN Channels;

----

Деление
=======

Деление отношений - создает новое отношение, содержащее атрибуты первого
отношения, отсутствующие во втором отношении и кортежи первого отношения,
которые совпали кортежами второго. 

Для выполнения этой операции второе отношения должно содержать лишь атрибуты, 
совпадающие с атрибутами первого.

Операция деления полезна тогда, когда запрос содержит слово «все». 

.. Пример

Даны следующие соотношения:

Таблица CartoonsChannels

+------------+--------------+-------------+
| id_cartoon | name_cartoon | name_channel|
+============+==============+=============+
|          0 | The Simpsons | Inter       |
+------------+--------------+-------------+
|          0 | The Simpsons | 1+1         |
+------------+--------------+-------------+
|          0 | The Simpsons | СТБ         |
+------------+--------------+-------------+
|          1 | Family Guy   | Inter       |
+------------+--------------+-------------+
|          1 | Family Guy   | 1+1         |
+------------+--------------+-------------+
|          2 | Duck Tales   | СТБ         |
+------------+--------------+-------------+
|          2 | Duck Tales   | 1+1         |
+------------+--------------+-------------+

Таблица Channels

+-------------+
| name_channel|
+=============+
| Inter       |
+-------------+
| 1+1         |
+-------------+


----

Результат деления
=================

+----+--------------+
| id | name_cartoon |
+====+==============+
|  0 | The Simpsons |
+----+--------------+
|  1 | Family Guy   |
+----+--------------+

Пояснение

**Family Guy** и **The Simpsons** — мультфильмы, которые показывались и на Inter и на 1+1 (условие во второй таблице). 
При этом **Duck Tales** не показывалось по **Inter**, потому был исключён из результирующей таблицы.

Эквивалентный SQL-запрос:

.. sourcecode:: sql

    -- mysql не поддерживает операцию DIVIDE
    mysql>SELECT DISTINCT c1.id_cartoon AS id, c1.name_cartoon AS name_cartoon  
            FROM CartoonsChanels AS c1 
            WHERE NOT EXISTS 
            (
                SELECT Chanels.name_channel FROM Chanels 
                WHERE Chanels.name_channel NOT IN 
                (
                    SELECT c2.name_channel 
                    FROM CartoonsChanels AS c2 
                    WHERE c2.name_cartoon=c1.name_cartoon
                )
            );

----

Соединение
==========

Операция соединения есть результат последовательного применения операций декартового произведения и выборки. 
Если в отношениях и имеются атрибуты с одинаковыми наименованиями, то перед выполнением соединения 
такие атрибуты необходимо переименовать.

Пример

Есть таблица Cartoons:

+-------------+--------------+------------+
| id_catroon  | name_cartoon | channel_id |
+=============+==============+============+
|           1 | The Simpsons |          1 |
+-------------+--------------+------------+
|           2 | Family Guy   |          1 |
+-------------+--------------+------------+
|           3 | Duck Tales   |          2 |
+-------------+--------------+------------+

и таблица Channels:

+------------+--------------+
| id_channel | name_channel |
+============+==============+
|          1 | Inter        |
+------------+--------------+
|          2 | ICTV         |
+------------+--------------+

Соединим их с выборкой **σ**\ :sub:`(id_channel=channel_id)`\ (Произведение)

----

Результат соединения
====================

Первый этап, декартовое произведение:

.. sourcecode:: sql

    SELECT * FROM Cartoons, Channels;

+-------------+--------------+------------+------------+--------------+
| id_catroons | name_cartoon | channel_id | id_channel | name_channel |
+=============+==============+============+============+==============+
|           1 | The Simpsons |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           1 | The Simpsons |          1 |          2 | ICTV         |
+-------------+--------------+------------+------------+--------------+
|           2 | Family Guy   |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           2 | Family Guy   |          1 |          2 | ICTV         |
+-------------+--------------+------------+------------+--------------+
|           3 | Duck Tales   |          2 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           3 | Duck Tales   |          2 |          2 | ICTV         |
+-------------+--------------+------------+------------+--------------+

Второй этап, выборка:

.. sourcecode:: sql
    
    SELECT * FROM Cartoons, Channels 
        WHERE Cartoons.channel_id=Channels.id_channel;

+-------------+--------------+------------+------------+--------------+
| id_catroons | name_cartoon | channel_id | id_channel | name_channel |
+=============+==============+============+============+==============+
|           1 | The Simpsons |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           2 | Family Guy   |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           3 | Duck Tales   |          2 |          2 | ICTV         |
+-------------+--------------+------------+------------+--------------+

    Вопрос: как получить только столбцы name_cartoon и name_channel?

.notes: :code:`SELECT Cartoons.name_cartoon, Channels.name_channel FROM Cartoons, Channels WHERE Cartoons.channel_id=Channels.id_channel;`

----

Inner Join
==========

Выбираются только совпадающие данные из объединяемых таблиц.

.. image:: https://www.w3schools.com/sql/img_innerjoin.gif

.. sourcecode:: sql

	 SELECT * FROM Cartoons
		INNER JOIN Channels 
		ON Cartoons.channel_id = Channels.id_channel;
		
+-------------+--------------+------------+------------+--------------+
| id_catroons | name_cartoon | channel_id | id_channel | name_channel |
+=============+==============+============+============+==============+
|           1 | The Simpsons |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           2 | Family Guy   |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           3 | Duck Tales   |          2 |          2 | ICTV         |
+-------------+--------------+------------+------------+--------------+

Внутреннее объединение INNER JOIN (синоним JOIN, ключевое слово INNER можно опустить). 
		
----

Outer Join
==========

Чтобы получить данные, которые подходят по условию частично, необходимо использовать 
внешнее объединение - **OUTER JOIN**. 

Такое объединение вернет данные из обеих таблиц (совпадающие по условию объединения) **ПЛЮС**
дополнит выборку оставшимися данными из внешней таблицы, которые по условию не подходят, 
заполнив недостающие данные значением **NULL**.

Существует два типа внешнего объединения OUTER JOIN - **LEFT** OUTER JOIN и **RIGHT** OUTER JOIN. 

Работают они одинаково, разница заключается в том что **LEFT** - указывает что "внешней" таблицей 
будет находящаяся слева (в нашем примере это таблица Cartoons), а **RIGHT** - что "внешней" 
таблица будет таблица справа (в нашем примере это таблица Channels).

----

Left Outer Join
===============

В случае с left join из главной таблицы будут выбраны все записи, даже если в присоединяемой 
таблице нет совпадений, то есть условие не учитывает присоединяемую (правую) таблицу.

.. image:: https://www.w3schools.com/sql/img_leftjoin.gif

Пример:

.. sourcecode:: sql

	 SELECT * FROM Cartoons
		OUTER LEFT JOIN Channels 
		ON Cartoons.channel_id = Channels.id_channel;


+-------------+--------------+------------+------------+--------------+
| id_catroons | name_cartoon | channel_id | id_channel | name_channel |
+-------------+--------------+------------+------------+--------------+
|           1 | The Simpsons |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           2 | Family Guy   |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           3 | Duck Tales   |          2 |          2 | ICTV         |
+-------------+--------------+------------+------------+--------------+
|           4 | Futurama     |         10 |       NULL | NULL         |
+-------------+--------------+------------+------------+--------------+
|           5 | Spanch Bob   |         15 |       NULL | NULL         |
+-------------+--------------+------------+------------+--------------+		
		

----


Right Outer Join
================

Right join отображает все строки удовлетворяющие правой части условия condition, 
даже если они не имеют соответствия в главной (левой) таблице:

.. image:: https://www.w3schools.com/sql/img_rightjoin.gif

Пример:

.. sourcecode:: sql

	 SELECT * FROM Cartoons
		OUTER RIGHT JOIN Channels 
		ON Cartoons.channel_id = Channels.id_channel;
		
+-------------+--------------+------------+------------+--------------+
| id_catroons | name_cartoon | channel_id | id_channel | name_channel |
+-------------+--------------+------------+------------+--------------+
|           1 | The Simpsons |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           2 | Family Guy   |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           3 | Duck Tales   |          2 |          2 | ICTV         |
+-------------+--------------+------------+------------+--------------+
|        NULL | NULL         |       NULL |          3 | 1+1          |
+-------------+--------------+------------+------------+--------------+
|        NULL | NULL         |       NULL |          4 | СТБ          |
+-------------+--------------+------------+------------+--------------+
|        NULL | NULL         |       NULL |          5 | 2+2          |
+-------------+--------------+------------+------------+--------------+

----

Full Join
==========

Full outer join (ключевое слово outer можно опустить) необходим для отображения всех возможных 
комбинаций строк из нескольких таблиц. Иными словами, это объединение результатов left и right join.

.. image:: https://www.w3schools.com/sql/img_fulljoin.gif

.. sourcecode:: sql

	SELECT column_name(s)
	FROM table1
	FULL OUTER JOIN table2
	ON table1.column_name=table2.column_name;

Некоторые СУБД не поддерживают такую функциональность (например, MySQL), в таких случаях обычно 
используют объединение двух запросов:	
	
.. sourcecode:: sql

	 SELECT * FROM Cartoons
		LEFT JOIN Channels 
		ON Cartoons.channel_id = Channels.id_channel
	 UNION
	 SELECT * FROM Cartoons
		OUTER RIGHT JOIN Channels 
		ON Cartoons.channel_id = Channels.id_channel;

----		
		
Результат Full Join
===================		
		
+-------------+--------------+------------+------------+--------------+
| id_catroons | name_cartoon | channel_id | id_channel | name_channel |
+-------------+--------------+------------+------------+--------------+
|           1 | The Simpsons |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           2 | Family Guy   |          1 |          1 | Inter        |
+-------------+--------------+------------+------------+--------------+
|           3 | Duck Tales   |          2 |          2 | ICTV         |
+-------------+--------------+------------+------------+--------------+
|           4 | Futurama     |         10 |       NULL | NULL         |
+-------------+--------------+------------+------------+--------------+
|           5 | Spanch Bob   |         15 |       NULL | NULL         |
+-------------+--------------+------------+------------+--------------+
|        NULL | NULL         |       NULL |          3 | 1+1          |
+-------------+--------------+------------+------------+--------------+
|        NULL | NULL         |       NULL |          4 | СТБ          |
+-------------+--------------+------------+------------+--------------+
|        NULL | NULL         |       NULL |          5 | 2+2          |
+-------------+--------------+------------+------------+--------------+		
		

----

Ссылки
======

- `Основы реляционной алгебры`_
- `Реляционная алгебра. Операции реляционной алгебры`_
- `Язык SQL и реляционная алгебра`_
- `Union, Difference, Intersection, and Division in MySQL`_  

.. http://faculty.utpa.edu/lianx/CSCI4333_2015fall.html

.. _Язык SQL и реляционная алгебра: http://imcs.dvfu.ru/struc/kkt/inform/studies/BD/Fomina.pdf 

.. _Основы реляционной алгебры: http://habrahabr.ru/post/145381/

.. _Реляционная алгебра. Операции реляционной алгебры: http://migku.wikidot.com/gos-db-16

.. _Union, Difference, Intersection, and Division in MySQL: https://faculty.utpa.edu/lianx/old_courses/CSCI4333_2014fall/MySQL-set-operators.pdf


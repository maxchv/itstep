
========
Триггеры
========

----

Триггеры
========

**Триггер** представляет собой хранимую процедуру, которая активизируется
при наступлении определенного события.

Существуют три события, на которые могут реагировать триггеры – **добавление**, **изменение** и **вставка** данных, 
т.е. любые попытки повлиять на данные. Когда происходит попытка вставки, обновления или удаления данных в таблице, 
и для этого действия этой таблицы объявлен триггер, он вызывается автоматически. Его нельзя обойти. 

В отличие от встроенных процедур, триггеры не могут вызываться напрямую и не получают или принимают параметры. 

..
    Например, можно задать хранимую процедуру, которая срабатывает каждый раз
    при удалении записи из транзакционной таблицы - таким образом,
    обеспечивается автоматическое удаление соответствующего заказчика из
    таблицы заказчиков, когда все его транзакции удаляются.

----
	
Синтаксис создания триггера в MySQL
-----------------------------------

.. sourcecode:: sql

    CREATE [DEFINER = { <имя_ пользователя> | CURRENT_USER }]
        TRIGGER <имя_триггера> <время_триггера> <событие_срабатывания>
        ON <имя_таблицы> FOR EACH ROW <выражение>

время_триггера
--------------

Определяет время свершения действия триггера:

**BEFORE** означает, что триггер выполнится до завершения события срабатывания триггера,
а **AFTER** означает, что после.

.. Например, при вставке записей (см. пример выше) наш триггер срабатывал до
   фактической вставки записи и вычислял сумму.

.. Такой вариант уместен при предварительном вычислении каких-то дополнительных
   полей в таблице или параллельной вставке в другую таблицу.

событие_срабатывания
--------------------

Обозначает при каком событии выполняется триггер:

**INSERT** т.е. при операциях вставки или аналогичных ей выражениях (INSERT, LOAD DATA, и REPLACE)

**UPDATE** когда сущность (строка) модифицирована

**DELETE** когда запись удаляется (запросы, содержащие выражения DELETE и/или REPLACE)

----

Синтаксис создания триггера в MS SQL
------------------------------------

.. sourcecode:: sql

	CREATE TRIGGER имя_триггера 
	ON { таблица | представление } 
	[ WITH ENCRYPTION ] 
	{ 
		{ { FOR | AFTER | INSTEAD OF } {[ DELETE ] [ , ] [ INSERT ] [ , ] [ UPDATE ] } 
			[ WITH APPEND ] 
			[ NOT FOR REPLICATION ] 
			AS 
			[ { IF UPDATE ( столбец ) 
				[ { AND | OR } UPDATE ( столбец ) ] 
					[ ...n ] 
			| IF (COLUMNS_UPDATED() {бинарный_оператор} бинарная_маска) 
					{ оператор_бин_сравнения } бинарная_маска [ ...n ] 
			} ] 
			выражение [ ...n ] 
		} 
	} 

При указании аргумента WITH ENCRYPTION сервер выполняет шифрование кода триггера, 
чтобы никто, включая администратора, не мог получить к нему доступ и прочитать его.
	
Внутри триггера не допускается выполнение ряда операций, таких, например, как:

* создание, изменение и удаление базы данных;
* восстановление резервной копии базы данных или журнала транзакций.

	
----

Откат изменений в триггере
--------------------------

Объявление триггера может содержать оператор ROLLBACK TRANSACTION даже если не существует соответствующего BEGIN TRANSACTION.

Создадим триггер, который будет выполнять только откат транзакции:

.. sourcecode:: sql

	CREATE TRIGGER u_tbPeoples ON dbo.tbPeoples
	FOR UPDATE
	AS
	 ROLLBACK TRANSACTION

----

Использование триггера
----------------------

При выполнении команд добавления, изменения и удаления записей сервер создает две специальные таблицы: 
inserted и deleted. В них содержатся списки строк, которые будут вставлены или удалены по завершении транзакции. 
Структура таблиц inserted и deleted идентична структуре таблиц, для которой определяется триггер. 

Для получения информации о количестве строк, которое будет изменено при успешном завершении триггера, 
можно использовать функцию @@ROWCOUNT

----

Пример работы с триггером
=========================

Создаем тестовую базу данных
----------------------------

.. sourcecode:: sql

    DROP DATABASE IF EXISTS test;
    CREATE DATABASE test;
    USE test;

    -- таблица, за которой мы будем следить
    CREATE TABLE test 
    (
        id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
        content TEXT NOT NULL 
    );

Создаем таблицу с журналом изменений
------------------------------------

.. sourcecode:: sql

    -- лог
    CREATE TABLE log 
    (
        id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
        msg VARCHAR( 255 ) NOT NULL,
        time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        row_id INT NOT NULL,
        content TEXT NOT NULL 
    );

----

Пример работы с триггером
=========================

Создаем триггеры
----------------

.. sourcecode:: sql

    -- триггеры
    DELIMITER |

    CREATE TRIGGER insert_test AFTER INSERT ON test
    FOR EACH ROW BEGIN
       INSERT INTO log 
            SET msg='insert', row_id = NEW.id, content = NEW.content;
    END|

    CREATE TRIGGER update_test before update ON test
    FOR EACH ROW BEGIN
      INSERT INTO log 
            SET msg='update', row_id = OLD.id, content = OLD.content;
    END|

    CREATE TRIGGER delete_test before delete ON test
    FOR EACH ROW BEGIN
      INSERT INTO log 
            SET msg='delete', row_id = OLD.id, content = OLD.content;
    END|

    DELIMITER ;

----

Проверяем работу триггеров
==========================

.. sourcecode:: sql

    INSERT INTO test(content) VALUES('It content was added');
    UPDATE test SET content='new updated content' WHERE id=1;
    DELETE FROM test where id=1;
    SELECT * FROM log;



+----+--------+-------------+--------+----------------------+
| id | msg    | time        | row_id | content              |
+====+========+=============+========+======================+
|  1 | insert | 2015-12-27  |      1 | It content was added |
+----+--------+-------------+--------+----------------------+
|  2 | update | 2015-12-27  |      1 | It content was added |
+----+--------+-------------+--------+----------------------+
|  3 | delete | 2015-12-27  |      1 | new updated content  |
+----+--------+-------------+--------+----------------------+


----

Список созданных триггеров
==========================

Показать триггер можно с помощью команды

.. sourcecode:: sql

    SHOW TRIGGERS [{FROM | IN} <база_данных>]
        [LIKE '<шаблон>' | WHERE <выражение>]
 
Это полная часть команды, в основном пользуются командами:
 
.. sourcecode:: sql

    SHOW TRIGGERS [FROM <база_данных>] [LIKE '<шаблон>']

или

.. sourcecode:: sql

    SHOW TRIGGERS

----

Удаление триггера
-----------------

Для удаления триггера используется, как обычно оператор, DROP, пример


.. sourcecode:: sql

    DROP TRIGGER [IF EXISTS] <имя_триггера> 

----

Домашнее задание
================

- Создать процедуру добавления нового фильма в базу данных.
  Предусмотреть возможность установления корректных связей
  между таблицами Movies <-> Generes, Movies <-> Actors, Movies->Directors.

- Создать функцию вычисления возвраста (актеров и режисеров) по дате рождения.
  Для вычисления разницы между двумя датами в годах воспользоваться кодом: 

.. sourcecode:: sql

   DATE_FORMAT(FROM_DAYS(TO_DAYS(now()) - TO_DAYS(@dateofbirth)), '%Y') + 0;

- Создать триггер для журналирования событий изменений (INSERT, UPDATE, DELETE) в таблице Movies.


----

Полезные ссылки
===============

- `MySQL Stored Procedures`_
- `CREATE PROCEDURE (Transact-SQL)`_
- `CREATE PROCEDURE Oracle Database Online Documentation`_
- `Хранимые процедуры и триггеры`_
- `Хранимые процедуры и триггеры. Активные базы данных`_
- `Работа с trigger (триггерами) в MySQL`_
- `Transact-SQL В подлиннике`_

.. _Transact-SQL В подлиннике: http://www.flenov.info/books.php?id=10

.. _MySQL Stored Procedures:  http://www.peregrinesalon.com/wp-content/uploads/2009/03/mysql-stored-procedures.pdf

.. _CREATE PROCEDURE (Transact-SQL): https://msdn.microsoft.com/ru-ru/library/ms187926(v=sql.120).aspx

.. _CREATE PROCEDURE Oracle Database Online Documentation: https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_6009.htm

.. _Хранимые процедуры и триггеры: http://www.zoonman.ru/library/mysql_sr_and_t.htm

.. _Хранимые процедуры и триггеры. Активные базы данных:  http://web.znu.edu.ua/lab/econom/dba/lectures/ADBS_lect5.pdf

.. _Работа с trigger (триггерами) в MySQL: http://blog.nagaychenko.com/2009/12/02/%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-trigger-%D1%82%D1%80%D0%B8%D0%B3%D0%B3%D0%B5%D1%80%D0%B0%D0%BC%D0%B8-%D0%B2-mysql/

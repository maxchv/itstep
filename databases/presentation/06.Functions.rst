
Функции SQL
===========

----

Функции агрегирования
=====================

.. SQL has many built-in functions for performing calculations on data.

SQL содержит ряд специальных встроенных функций применяемых к данным в запросах.

В каждой СУБД поддерживается свой набор функций, но существуют стандартные SQL функции, утвержденные стандартом, которые поддерживаются всеми СУБД.

.. SQL aggregate functions return a single value, calculated from values in a column.

Функции агрегирования SQL оперируют совокупностью значений столбца некоторой таблицы и возвращают единственное значение.

.. Useful aggregate functions:

Функции агрегирования:
----------------------------------

- `AVG`_    - среднее значение
- `COUNT`_  - количество записей
- `FIRST`_  - первое значение
- `LAST`_   - последнее значение
- `MAX`_    - наибольшее значение
- `MIN`_    - наименьшее значение
- `SUM`_    - сумму

----

AVG
===

Функция AVG() возвращает среднее значение колонки.

Синтакс функции AVG()
---------------------

.. sourcecode:: sql

    SELECT AVG(<имя_поля>)
        FROM <имя_таблицы>;

Пример
------

.. The following SQL statement gets the average value of the "Price" column from the "Products" table:

Следующий пример демонстрирует получение среднего значения цены из таблицы Products.

+-----------+------------------------------+--------------+-----------+
| ProductID | ProductName                  | UnitsInStock | UnitPrice |
+===========+==============================+==============+===========+
|         1 | Chai                         |           39 |   18.0000 |
+-----------+------------------------------+--------------+-----------+
|         2 | Chang                        |           17 |   19.0000 |
+-----------+------------------------------+--------------+-----------+
|         3 | Aniseed Syrup                |           13 |   10.0000 |
+-----------+------------------------------+--------------+-----------+
|         4 | Chef Anton's Cajun Seasoning |           53 |   22.0000 |
+-----------+------------------------------+--------------+-----------+
|         5 | Chef Anton's Gumbo Mix       |            0 |   21.3500 |
+-----------+------------------------------+--------------+-----------+


.. sourcecode:: mysql

    SELECT AVG(UnitPrice) AS PriceAverage
        FROM Products;

Результат
---------

+--------------+
| PriceAverage |
+==============+
|  18.07000000 |
+--------------+

----

Пример
======

Применение функции AVG() во вложенном запросе:

+-----------+------------------------------+--------------+-----------+
| ProductID | ProductName                  | UnitsInStock | UnitPrice |
+===========+==============================+==============+===========+
|         1 | Chai                         |           39 |   18.0000 |
+-----------+------------------------------+--------------+-----------+
|         2 | Chang                        |           17 |   19.0000 |
+-----------+------------------------------+--------------+-----------+
|         3 | Aniseed Syrup                |           13 |   10.0000 |
+-----------+------------------------------+--------------+-----------+
|         4 | Chef Anton's Cajun Seasoning |           53 |   22.0000 |
+-----------+------------------------------+--------------+-----------+
|         5 | Chef Anton's Gumbo Mix       |            0 |   21.3500 |
+-----------+------------------------------+--------------+-----------+

Отобразить продукты, цена которых выше средней.

.. sourcecode:: mysql

    SELECT ProductName, UnitPrice FROM Products
        WHERE UnitPrice>(SELECT AVG(UnitPrice) FROM Products);

Результат
---------

+------------------------------+-----------+
| ProductName                  | UnitPrice |
+==============================+===========+
| Chang                        |   19.0000 |
+------------------------------+-----------+
| Chef Anton's Cajun Seasoning |   22.0000 |
+------------------------------+-----------+
| Chef Anton's Gumbo Mix       |   21.3500 |
+------------------------------+-----------+


----

COUNT
=====

.. The COUNT() function returns the number of rows that matches a specified criteria.

Функция COUNT() возвращает количество строк соответствующих заданному критерию.

.. SQL COUNT(column_name) Syntax

Синтаксис COUNT(<имя_поля>)
---------------------------


Функция **COUNT(<имя_поля>)** возвращает количество значений (кроме NULL) заданного поля:

.. sourcecode:: sql

    SELECT COUNT(<имя_поля>)
        FROM <имя_таблицы>;

Синтаксис COUNT(*)
------------------

Функция **COUNT(*)** возвращает количество записей в таблице:

.. sourcecode:: sql

    SELECT COUNT(*) FROM table_name;

Синтаксис COUNT(DISTINCT <имя_поля>)
------------------------------------

Функция **COUNT(DISTINCT <имя_поля>)** возвращает количество уникальных записей заданного поля таблицы:

.. sourcecode:: sql

    SELECT COUNT(DISTINCT <имя_поля>)
        FROM <имя_таблицы>;

Примечание: **COUNT(DISTINCT)** применим для ORACLE, MySQL и Microsoft SQL Server, но не для Microsoft Access.

----

Пример
======

+---------+------------+------------+---------------------+---------+
| OrderID | CustomerID | EmployeeID | OrderDate           | ShipVia |
+=========+============+============+=====================+=========+
|   10265 | BLONP      |          2 | 1996-07-25 00:00:00 |       1 |
+---------+------------+------------+---------------------+---------+
|   10266 | WARTH      |          3 | 1996-07-26 00:00:00 |       3 |
+---------+------------+------------+---------------------+---------+
|   10267 | FRANK      |          4 | 1996-07-29 00:00:00 |       1 |
+---------+------------+------------+---------------------+---------+
|   10268 | GROSR      |          8 | 1996-07-30 00:00:00 |       3 |
+---------+------------+------------+---------------------+---------+

Следующий SQL запрос подсчитывае количество записей в таблице "Orders" при наличии фильтра "CustomerID"=7:

.. The following SQL statement counts the number of orders from "CustomerID"=7 from the "Orders" table:

.. sourcecode:: sql

    SELECT COUNT(CustomerID) AS OrdersFromCustomerID7
        FROM Orders WHERE CustomerID='WARTH';

+-----------------------+
| OrdersFromCustomerID7 |
+=======================+
|                     1 |
+-----------------------+

Следующий запрос позволяет определить общее количество записей в таблице

.. sourcecode:: sql

    SELECT COUNT(*) AS NumberOfOrders FROM Orders;

+----------------+
| NumberOfOrders |
+================+
|              4 |
+----------------+

.. The following SQL statement counts the number of unique customers in the "Orders" table:

Следующий SQL запрос подсчитывает количество уникальных покупателей в таблице "Orders":

.. sourcecode:: sql

    SELECT COUNT(DISTINCT CustomerID) AS NumberOfCustomers FROM Orders;

----

FIRST
=====

Функция FIRST() возвращает первое значение выборки.

Синтаксис
---------

.. sourcecode:: sql

    SELECT FIRST(<имя_поля>)
        FROM <имя_таблицы>;

Примечание: функция FIRST() поддерживается только СУБД MS Access.

Синтаксис MS SQL Server
-----------------------

.. sourcecode:: sql

    SELECT TOP 1 <имя_поля>
        FROM <имя_таблицы>
        ORDER BY <имя_поля> ASC;

Синтаксис MySQL
---------------

.. sourcecode:: sql

    SELECT <имя_поля>
        FROM <имя_таблицы>
        ORDER BY <имя_поля> ASC
        LIMIT 1;

----

LAST
====

Функция LAST() возвращает последнее значение выборки.

Синтаксис
---------

.. sourcecode:: sql

    SELECT LAST(<имя_поля>)
        FROM <имя_таблицы>;

Примечание: функция LAST() поддерживается только СУБД MS Access.

Синтаксис MS SQL Server
-----------------------

.. sourcecode:: sql

    SELECT TOP 1 <имя_поля>
        FROM <имя_таблицы>
        ORDER BY <имя_поля> DESC;

Синтаксис MySQL
---------------

.. sourcecode:: sql

    SELECT <имя_поля>
        FROM <имя_таблицы>
        ORDER BY <имя_поля> DESC
        LIMIT 1;

----

MAX
===

Функция MAX() возвращает максимальное значение выборки.

Синтаксис
---------

.. sourcecode:: sql

    SELECT MAX(<имя_поля>)
        FROM <имя_таблицы>;

Пример
------

Найти наибольшую цену товара

+-----------+---------------------------------+------------+------------+---------------------+-----------+
| ProductID | ProductName                     | SupplierID | CategoryID | QuantityPerUnit     | UnitPrice |
+===========+=================================+============+============+=====================+===========+
|         1 | Chai                            |          1 |          1 | 10 boxes x 20 bags  |   18.0000 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+
|         2 | Chang                           |          1 |          1 | 24 - 12 oz bottles  |   19.0000 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+
|         3 | Aniseed Syrup                   |          1 |          2 | 12 - 550 ml bottles |   10.0000 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+
|         4 | Chef Anton's Cajun Seasoning    |          2 |          2 | 48 - 6 oz jars      |   22.0000 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+
|         5 | Chef Anton's Gumbo Mix          |          2 |          2 | 36 boxes            |   21.3500 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+

.. sourcecode:: sql

    select MAX(UnitPrice)
        from Products;

Результат
---------

+----------------+
| MAX(UnitPrice) |
+================+
|        22.0000 |
+----------------+

----

MIN
===

Функция MIN() возвращает значение значение выборки.

Синтаксис
---------

.. sourcecode:: sql

    SELECT MIN(<имя_поля>)
        FROM <имя_таблицы>;

Пример
------

Найти наименьшую цену товара

+-----------+---------------------------------+------------+------------+---------------------+-----------+
| ProductID | ProductName                     | SupplierID | CategoryID | QuantityPerUnit     | UnitPrice |
+===========+=================================+============+============+=====================+===========+
|         1 | Chai                            |          1 |          1 | 10 boxes x 20 bags  |   18.0000 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+
|         2 | Chang                           |          1 |          1 | 24 - 12 oz bottles  |   19.0000 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+
|         3 | Aniseed Syrup                   |          1 |          2 | 12 - 550 ml bottles |   10.0000 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+
|         4 | Chef Anton's Cajun Seasoning    |          2 |          2 | 48 - 6 oz jars      |   22.0000 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+
|         5 | Chef Anton's Gumbo Mix          |          2 |          2 | 36 boxes            |   21.3500 |
+-----------+---------------------------------+------------+------------+---------------------+-----------+

.. sourcecode:: sql

    select MIN(UnitPrice)
        from Products;

Результат
---------

+----------------+
| MIN(UnitPrice) |
+================+
|        10.0000 |
+----------------+

----

SUM
===

Функция SUM() возвращает суммарное значение  function returns the total sum of a numeric column.


Синтаксис
---------

.. sourcecode:: sql

    SELECT SUM(<имя_поля>)
        FROM <имя_таблицы>;


Пример
------

+---------+-----------+-----------+----------+----------+
| OrderID | ProductID | UnitPrice | Quantity | Discount |
+=========+===========+===========+==========+==========+
|   10248 |        11 |   14.0000 |       12 |        0 |
+---------+-----------+-----------+----------+----------+
|   10248 |        42 |    9.8000 |       10 |        0 |
+---------+-----------+-----------+----------+----------+
|   10248 |        72 |   34.8000 |        5 |        0 |
+---------+-----------+-----------+----------+----------+
|   10249 |        14 |   18.6000 |        9 |        0 |
+---------+-----------+-----------+----------+----------+
|   10249 |        51 |   42.4000 |       40 |        0 |
+---------+-----------+-----------+----------+----------+
|   10250 |        41 |    7.7000 |       10 |        0 |
+---------+-----------+-----------+----------+----------+
|   10250 |        51 |   42.4000 |       35 |        0 |
+---------+-----------+-----------+----------+----------+
|   10250 |        65 |   16.8000 |       15 |        0 |
+---------+-----------+-----------+----------+----------+

.. sourcecode:: sql

    select sum(Quantity)
        from Order;


Результат
---------

+---------------+
| sum(Quantity) |
+===============+
|           136 |
+---------------+

----

GROUP BY
========

Aggregate functions often need an added GROUP BY statement.

The GROUP BY Statement
----------------------

The GROUP BY statement is used in conjunction with the aggregate functions to group the result-set by one or more columns.

SQL GROUP BY Syntax
-------------------

.. sourcecode:: sql

    SELECT column_name, aggregate_function(column_name)
        FROM table_name
        WHERE column_name operator value
        GROUP BY column_name;

Пример
------

----

HAVING
======

The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

SQL HAVING Syntax
-----------------

.. sourcecode:: sql

    SELECT column_name, aggregate_function(column_name)
        FROM table_name
        WHERE column_name operator value
        GROUP BY column_name
        HAVING aggregate_function(column_name) operator value;

Пример
------

----

.. SQL Scalar functions

Скалярные фкнкции SQL
=====================

.. SQL scalar functions return a single value, based on the input value.

Скалярные функции SQL возвращают единственное значение исходя из входного аргумента.

.. Useful scalar functions:


Стандартные скалярные функции:
------------------------------

- `UCASE`_  - приводит строку к верхнему регистру
- `LCASE`_  - приводит строку к нижнему регистрку
- `MID`_     - извлекает подстроку из входной строки
- `LEN`_     - возвращает длину строки
- `ROUND`_   - округляет число с заданной точностью
- `NOW`_     - возвращает системное время
- `FORMAT`_  - форматирует вывод

----

UCASE
=====

----

LCASE
=====

----

MID
===

----

LEN
===

----

ROUND
=====

----

NOW
===

----

FORMAT
======

----


SQL NULL Functions
==================

SQL ISNULL(), NVL(), IFNULL() and COALESCE() Functions

Look at the following "Products" table:

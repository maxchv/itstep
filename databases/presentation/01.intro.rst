Введение в базы данных
======================

--------------

Где хранить данные программ
===========================

При разработке прикладного ПО возникает необходимость в работе с различного рода данными.
Эти данные необходимо сохранять между запуском программы.
Кроме того, эти данные возможно необходимо предоставлять различным программам (клиентам).

Как хранить эти данные? Текстовый файл? Бинарный файл? Какой выбрать формат файла?

.. image:: http://www.victorija.ua/wp-content/uploads/2013/05/percdata.jpg

--------------

Понятие базы данных (б/д)
=========================

**База данных** (database/db) - это совокупность данных связанных между собой определенной тематикой.
Данных сохраняются на машинных носителях системы в упорядоченнм виде.

.. image:: http://netpoint-dc.com/blog/wp-content/uploads/2015/09/db_hosting.png
    :width: 300px

Можно сравнить базу данных со шкафом, в котором хранятся документы. 


--------------

СУБД
====

**Системы управления б/д** (СУБД) - программы, которые предназначенные для управления б/д.

Имеют следующие составляющие:

* Ядро СУБД, отвечающее за управление данными и их журналирование
* Процессор языка базы данных, обеспечивающий оптимизацию запросов и переводом их на машинный язык
* Подсистему поддержки времени выполнения (runtime), которая создает пользовательский интерфейс и обеспечивает его взаимодействие с б/д
* Набор утилит, которые предоставляют дополнительные возможности по обслуживанию информационной системы.

В общем СУБД - это система, позволяющая создавать базы данных и манипулировать сведениями из них.

--------------

Типы и модели б/д и СУБД
========================

Находят применение следующие 4 типа моделей б/д и СУБД:

* Иерархические
* Сетевые
* Реляционные
* Объектно-ориентированные

-------------

Иерархические б/д
=================

`Иерархическая модель данных <https://ru.wikipedia.org/wiki/%D0%98%D0%B5%D1%80%D0%B0%D1%80%D1%85%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85>`_ 
— это модель данных, где используется представление базы данных в виде 
древовидной (иерархической) структуры, состоящей из объектов (данных) различных уровней.

.. image:: http://zametkinapolyah.ru/wp-content/uploads/2012/08/r71.jpg 
    :height: 200px

Примеры:

* Реестр Windows
* Серевера каталогов такие как LDAP Active и Directory
* Information Management System (IMS) фирмы IBM

-------------

Сетевые б/д
===========

`Сетевая модель данных <https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%82%D0%B5%D0%B2%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85>`_ 
— логическая модель данных, являющаяся расширением иерархического подхода.
Разница между иерархической моделью данных и сетевой состоит в том, что в иерархических структурах 
запись-потомок должна иметь в точности одного предка, а в сетевой структуре данных у потомка может иметься любое число предков.

.. image:: http://zametkinapolyah.ru/wp-content/uploads/2013/01/net_model.gif
    :height: 200px

Примеры:

* Internet
* Cerebrum
* CronosPRO

-------------

Реляционные б/д
===============

В `реляционной б/д <https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85>`_ 
все данные сохраняются в виде двумерных таблиц. Таблицы состоят из столбцов и рядов данных.

.. image:: http://www.moodle.ipm.kstu.ru/pluginfile.php/40357/mod_page/content/23/400px-RefIntExample.png 
    :height: 230px

Примеры:

* MS SQL Server
* Oracle
* MySQL
* MS Access

-------------

Объектно-ориентированные б/д
============================

`Объектно-ориентированная база данных (ООБД) <https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%B0%D1%8F_%D0%B1%D0%B0%D0%B7%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85>`_ 
— база данных, в которой данные моделируются в виде объектов, их атрибутов, методов и классов.

Объектно-ориентированные базы данных обычно рекомендованы для тех случаев, когда требуется высокопроизводительная обработка данных, имеющих сложную структуру.

.. image:: http://www.inteltec.ru/publish/articles/objtech/chronic/img00004.gif
    :height: 300px

Примеры:    

* IBM Lotus Notes/Domino
* Jasmine
* ObjectStore
* db4objects
* ODB-Jupiter

-------------


Эдгар Франк «Тед» Кодд 
======================

Британский учёный, работы которого заложили основы теории **реляционных баз данных**.

.. image:: https://upload.wikimedia.org/wikipedia/ru/5/58/Edgar_F_Codd.jpg
	:height: 300px

Работая в компании **IBM**, он создал реляционную модель данных. 
Он также внёс существенный вклад в другие области информатики.

-------------


12 правил Кодда
===============

.. 0. Основное правило Реляционная СУБД должна быть способна полностью управлять базой данных, используя связи между данными

.. Чтобы быть реляционной системой управления базами данных (СУБД), система должна использовать исключительно свои реляционные возможности для управления базой данных.

1. Явное представление данных (The Information Rule).

.notes: Информация должна быть представлена в виде данных, хранящихся в ячейках. Данные, хранящиеся в ячейках, должны быть атомарны. Порядок строк в реляционной таблице не должен влиять на смысл данных.

2. Гарантированный доступ к данным (Guaranteed Access Rule).

.notes: Доступ к данным должен быть свободен от двусмысленности. К каждому элементу данных должен быть гарантирован доступ с помощью комбинации имени таблицы, первичного ключа строки и имени столбца.

3. Систематическая поддержка отсутствующих значений (Systematic Treatment of Null Values).

.notes: Неизвестные, или отсутствующие значения NULL, отличные от любого известного значения, должны поддерживаться для всех типов данных при выполнении любых операций. Например, для числовых данных неизвестные значения не должны рассматриваться как нули, а для символьных данных — как пустые строки.

-------------

12 правил Кодда (продолжение)
=============================

4. Доступ к словарю данных в терминах реляционной модели (Active On-Line Catalog Based on the Relational Model).

.notes: Словарь данных должен сохраняться в форме реляционных таблиц, и СУБД должна поддерживать доступ к нему при помощи стандартных языковых средств, тех же самых, которые используются для работы с реляционными таблицами, содержащими пользовательские данные.

5. Полнота подмножества языка 

.notes: Система управления реляционными базами данных должна поддерживать хотя бы один реляционный язык, который
    (а) имеет линейный синтаксис,
    (б) может использоваться как интерактивно, так и в прикладных программах,
    (в) поддерживает операции определения данных, определения представлений, манипулирования данными (интерактивные и программные), ограничители целостности, управления доступом и операции управления транзакциями (begin, commit и rollback).

6. Возможность изменения представлений

.notes: Каждое представление должно поддерживать все операции манипулирования данными, которые поддерживают реляционные таблицы: операции выборки, вставки, изменения и удаления данных.

-------------

12 правил Кодда (продолжение)
=============================


7. Наличие высокоуровневых операций управления данными

.notes: Операции вставки, изменения и удаления данных должны поддерживаться не только по отношению к одной строке реляционной таблицы, но и по отношению к любому множеству строк.

8. Физическая независимость данных

.notes: Приложения не должны зависеть от используемых способов хранения данных на носителях, от аппаратного обеспечения компьютеров, на которых находится реляционная база данных.

9. Логическая независимость данных

.notes: Представление данных в приложении не должно зависеть от структуры реляционных таблиц. Если в процессе нормализации одна реляционная таблица разделяется на две, представление должно обеспечить объединение этих данных, чтобы изменение структуры реляционных таблиц не сказывалось на работе приложений.

-------------

12 правил Кодда (продолжение)
=============================

10. Независимость контроля целостности

.notes: Вся информация, необходимая для поддержания целостности, должна находиться в словаре данных. Язык для работы с данными должен выполнять проверку входных данных и автоматически поддерживать целостность данных.

11. Независимость от расположения

.notes: База данных может быть распределённой, может находиться на нескольких компьютерах, и это не должно оказывать влияния на приложения. Перенос базы данных на другой компьютер не должен оказывать влияния на приложения.

12. Согласование языковых уровней

.notes: Если используется низкоуровневый язык доступа к данным, он не должен игнорировать правила безопасности и правила целостности, которые поддерживаются языком более высокого уровня.





Процедуры, функции, триггеры
============================

----

Хранимые процедуры
==================

**Хранимые процедуры (stored procedure)** -  это именованный набор команд, хранящийся
непосредственно на сервере и представляющий собой самостоятельный объект базы данных. 

Без хранимых процедур пользователю пришлось бы вводить весь набор команд всякий раз,
когда он хочет выполнить какое-либо действие.

.. image:: http://www.mysqltutorial.org/wp-content/uploads/2009/12/mysql-stored-procedure1.jpg

----

Преимущества хранимых процедур:
==============================

- Использование хранимых процедур повышает скорость выполнения операций, так
  как процедура предварительно компилируется на сервере, и при повторном вызове
  процедура уже загружена в память (кэш), где найти ее можно гораздо быстрее, 
  чем на диске, к тому же не нужна повторная компиляция и оптимизация.

- Хранимые процедуры могут состоять из десятков и сотен команд, но для их
  запуска достаточно указать всего лишь имя нужной хранимой процедуры. Это позволяет уменьшить размер запроса, посылаемого по сети от клиента на сервер, так как весь набор команд находится в том месте, где он должен быть выполнен. Таким образом, при использовании хранимых процедур возможно уменьшение нагрузки на сеть.
  
- Использование хранимых процедур реализует принцип модульного проектирования,
  так как процедуры позволяют разбивать большие задачи на самостоятельные, более
  мелкие и удобные в управлении части.


----

Создание подпрограмм
====================

Сохраненная подпрограмма является процедурой или функцией. 

Сохраненные подпрограммы создаются командами **CREATE PROCEDURE** и **CREATE FUNCTION**. 

Процедура вызывается, используя инструкцию **CALL (EXEC)**, и может `только передавать обратные значения,
используя переменные вывода.` 

Функция может быть вызвана точно так же, как и любая другая функция языка (то есть, вызывая имя функции),
и `может возвращать скалярное значение`. 

Сохраненные подпрограммы, разумеется, могут вызывать другие сохраненные подпрограммы.

.. sourcecode:: sql

    -- Синтаксис создания процедуры
    CREATE PROCEDURE имя_процедуры ([параметр_процедуры[,...]])
            [характеристика ...] тело_подпрограммы

    -- синтаксис создания функции
    CREATE FUNCTION имя_функции ([параметр_функции[,...]])
            RETURNS тип
            [характеристика ...] тело_подпрограммы

параметр_процедуры: [ **IN** | **OUT** | **INOUT** ] имя_параметра тип

параметр_функции: имя_параметра тип

тип: Любой тип данных SQL

тело_подпрограммы: Правильное  SQL выражение.

----

Пример создания процедуры
=========================

Синтаксис
---------

.. sourcecode:: sql

    DELIMITER //

    CREATE PROCEDURE procedure1                     /* имя              */
        (IN parameter1 INTEGER)                     /* входной параметр */
        BEGIN                                       /* начало блока     */
            DECLARE variable1 CHAR(10);             /* переменные       */
            IF parameter1 = 17 THEN                 /* начало IF        */
                SET variable1 = 'birds';            /* присвоение       */
            ELSE
                SET variable1 = 'beasts';           /* присвоение       */
            END IF;                                 /* конец IF         */
            INSERT INTO table1 VALUES (variable1);  /* запрос           */
        END //                                      /* конец блока      */
    
    DELIMITER ;

Вызов процедуры
---------------

.. sourcecode:: sql
    
    CALL procedure1(10);

----

Переменные
==========

Локальные переменные
---------------------

Команда DECLARE
~~~~~~~~~~~~~~~

.. sourcecode:: sql

    DECLARE <имя_переменной>[,...] <тип_переменной>
        [DEFAULT <значение_по_умолчанию>]

Пример:
~~~~~~~

.. sourcecode:: sql

    DECLARE iVar INT DEFAULT 0;
    SET iVar = 5;
    SELECT * FROM `data` WHERE `id` = iVar;
 
    DECLARE iVar INT DEFAULT 0;
    SELECT COUNT(*) INTO iVar FROM `data`;

Системные переменные
--------------------

Команда SET
~~~~~~~~~~~

.. sourcecode:: sql

    SET <имя_переменной> = <значение>
        [, <имя_переменной> = <значение>] ...

Пример:
~~~~~~~

.. sourcecode:: sql

    SET @iVar = 5;
    SELECT @iVar;

----

Параметры
=========

.. Хранимые процедуры могут иметь **IN**, **OUT** и **INOUT** параметры.

IN 
--

По умолчанию. Этот параметр принимается процедурой и может изменяться внутри процедуру, но не может изменятся вне процедуры.

.. sourcecode:: sql

    CREATE PROCEDURE sp_in(p VARCHAR(11)) SET @x = P;  
    CALL sp_in('Hello world');  
    SELECT @x


OUT
---

Значения не передаются, но могут быть изменены внутри процедуры, а также изменены вне процедуры.

.. sourcecode:: sql

    SET @x='Something';  
    CREATE PROCEDURE sp_out(OUT p VARCHAR(10)) SET P='Hello world';  
    CALL sp_out(@x);  
    SELECT @x

INOUT
-----

Совмещает в себе свойства параметров IN и OUT. Значение может передаваться в процедуру, изменяться внутри процедуры и быть доступным вне процедуры.

.. sourcecode:: sql

    CREATE PROCEDURE sp_inout(INOUT P INT) SET @x=P*2;  
    set @a = 5;  
    CALL sp_inout(@a);  
    SELECT @x  

----

Условия
=======

.. sourcecode:: sql

    IF условие THEN
        действие;
    ELSE
        действие;
    END IF;
----

Циклы
=====

.. sourcecode:: sql

    WHILE условие DO
        действие;
    END WHILE;

----

Изменения подпрограмм
=====================

ALTER PROCEDURE | FUNCTIN
-------------------------

.. sourcecode:: sql

    ALTER {PROCEDURE | FUNCTION} sp_name
        [characteristic ...]

characteristic:

{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
   | SQL SECURITY { DEFINER | INVOKER }
   | COMMENT 'string'

ALTER FUNCTION
--------------

----

Триггеры
========

**Триггер** представляет собой хранимую процедуру, которая активизируется 
при наступлении определенного события. 

Например, можно задать хранимую процедуру, которая срабатывает каждый раз 
при удалении записи из транзакционной таблицы - таким образом, 
обеспечивается автоматическое удаление соответствующего заказчика из 
таблицы заказчиков, когда все его транзакции удаляются.


----

Полезные ссылки
===============

- `MySQL Stored Procedures`_
- `Хранимые процедуры и триггеры`_
- `Хранимые процедуры и триггеры. Активные базы данных`_ 
  
.. _MySQL Stored Procedures:  http://www.peregrinesalon.com/wp-content/uploads/2009/03/mysql-stored-procedures.pdf

.. _Хранимые процедуры и триггеры: http://www.zoonman.ru/library/mysql_sr_and_t.htm

.. _Хранимые процедуры и триггеры. Активные базы данных:  http://web.znu.edu.ua/lab/econom/dba/lectures/ADBS_lect5.pdf

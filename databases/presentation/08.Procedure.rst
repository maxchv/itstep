
===============================
Хранимые подпрограммы, триггеры
===============================

----

Хранимые процедуры
==================

**Хранимые подпрограммы (stored routines)** -  это именованный набор команд, хранящийся
непосредственно на сервере и представляющий собой самостоятельный объект базы данных.

Без хранимых подпрограмм пользователю пришлось бы вводить весь набор команд всякий раз,
когда необходимо выполнить какое-либо действие.

.. image:: http://www.mysqltutorial.org/wp-content/uploads/2009/12/mysql-stored-procedure1.jpg

----

Преимущества подпрограмм:
=========================

- Использование хранимых подпрограмм `повышает скорость выполнения операций`, так
  как подпрограммы предварительно компилируется на сервере, и при повторном вызове
  процедура уже загружена в память (кэш), где найти ее можно гораздо быстрее,
  чем на диске, к тому же не нужна повторная компиляция и оптимизация.

- Хранимые подпрограммы могут состоять из десятков и сотен команд, но для их
  запуска достаточно указать всего лишь имя нужной хранимой подпрограммы. 
  `Это позволяет уменьшить размер запроса`, посылаемого по сети от клиента на сервер, 
  так как весь набор команд находится в том месте, где он должен быть выполнен. 
  Таким образом, при использовании хранимых подпрограмм `возможно уменьшение нагрузки на сеть`.
  Правда это увеличивает нагрузку на сервер, поскольку большее количество работы выполнено на сервере.

- Использование хранимых подпрограмм реализует принцип модульного проектирования,
  так как `процедуры позволяют разбивать большие задачи на самостоятельные`,
  более мелкие и удобные в управлении части.

- Сохраненные подпрограммы также позволяют иметь `библиотеки функций` непосредственно на сервере.

----

Создание подпрограмм
====================

Сохраненная подпрограмма это процедура или функция.

Сохраненные подпрограммы создаются командами **CREATE PROCEDURE** и **CREATE FUNCTION**.

Процедура вызывается через инструкцию **CALL (EXEC)**, и может `только передавать обратные значения,
используя переменные вывода.`

Функция может быть вызвана точно так же, как и любая другая функция языка (то есть, указываю имя функции),
и `может возвращать скалярное значение`.

Сохраненные подпрограммы, разумеется, могут вызывать другие сохраненные подпрограммы.

.. sourcecode:: sql

    -- Синтаксис создания процедуры
    CREATE PROCEDURE имя_процедуры ([параметр_процедуры[,...]])
            [характеристика ...] <AS> тело_подпрограммы

    -- синтаксис создания функции
    CREATE FUNCTION имя_функции ([параметр_функции[,...]])
            RETURNS тип
            [характеристика ...] <AS> тело_подпрограммы

параметр_процедуры: [ **IN** | **OUT** | **INOUT** ] имя_параметра тип

параметр_функции: имя_параметра тип

тип: Любой тип данных SQL

тело_подпрограммы: Правильное  SQL выражение.

----

Пример создания процедуры в mysql
=================================

Синтаксис
---------

.. sourcecode:: sql

    DELIMITER // -- задание разделителя команд

    CREATE PROCEDURE procedure1                     /* имя              */
        (IN parameter1 INTEGER)                     /* входной параметр */
        BEGIN                                       /* начало блока     */
            DECLARE variable1 CHAR(10);             /* переменные       */
            IF parameter1 = 17 THEN                 /* начало IF        */
                SET variable1 = 'birds';            /* присвоение       */
            ELSE
                SET variable1 = 'beasts';           /* присвоение       */
            END IF;                                 /* конец IF         */
            INSERT INTO table1 VALUES (variable1);  /* запрос           */
        END //                                      /* конец блока      */

    DELIMITER ;

Вызов процедуры
---------------

.. sourcecode:: sql

    CALL procedure1(10);

----

Хранимые процедуры в MS SQL
---------------------------

Синтаксис:

.. sourcecode:: sql

	CREATE PROC [ EDURE ] procedure_name [ ; number ] 
		[ { @parameter data_type } 
			[ VARYING ] [ = default ] [ OUTPUT ] 
		] [ ,...n ] 

	[ WITH 
		{ RECOMPILE | ENCRYPTION | RECOMPILE , ENCRYPTION } ] 

	[ FOR REPLICATION ] 

	AS sql_statement [ ...n ]

----

Пример создания процедуры в MS SQL
==================================

Синтаксис
---------

.. sourcecode:: sql
   
    CREATE PROCEDURE procedure1                     /* имя              */
        (@parameter1 INTEGER)                       /* входной параметр */
		AS
            DECLARE @variable1 CHAR(10);            /* переменные       */
            IF @parameter1 = 17 THEN                /* начало IF        */
                SET @variable1 = 'birds';           /* присвоение       */
            ELSE
                SET @variable1 = 'beasts';          /* присвоение       */
            END                                     /* конец IF         */
            INSERT INTO table1 VALUES (@variable1); /* запрос           */
        GO   
	

Вызов процедуры
---------------

.. sourcecode:: sql

    EXEC procedure1(10);	

----

Переменные в mysql
==================

Локальные переменные
---------------------

Команда DECLARE
~~~~~~~~~~~~~~~

.. sourcecode:: sql

    DECLARE <имя_переменной>[,...] <тип_переменной>
        [DEFAULT <значение_по_умолчанию>]

Пример:
~~~~~~~

.. sourcecode:: sql

    DECLARE iVar INT DEFAULT 0;
    SET iVar = 5;
    SELECT * FROM `data` WHERE `id` = iVar;

    DECLARE iVar INT DEFAULT 0;
    SELECT COUNT(*) INTO iVar FROM `data`;

Системные переменные
--------------------

Команда SET
~~~~~~~~~~~

.. sourcecode:: sql

    SET <имя_переменной> = <значение>
        [, <имя_переменной> = <значение>] ...

Пример:
~~~~~~~

.. sourcecode:: sql

    SET @iVar = 5;
    SELECT @iVar;

----

Переменные в MS SQL
===================

Локальные переменные
---------------------

Команда DECLARE
~~~~~~~~~~~~~~~

.. sourcecode:: sql

    DECLARE @<имя_переменной>[,...] [AS] <тип_переменной>
        [= <значение_по_умолчанию>]

Пример:
~~~~~~~

.. sourcecode:: sql

    DECLARE @iVar INT = 0;
    SET @iVar = 5;
    SELECT * FROM `data` WHERE `id` = @iVar;

    DECLARE @iVar INT = 0;
    SELECT @iVar = COUNT(*) FROM `data`;

----


Параметры
=========

.. Хранимые процедуры в mysql могут иметь **IN**, **OUT** и **INOUT** параметры.

IN
--

По умолчанию. Этот параметр принимается процедурой и может изменяться внутри процедуру, но не может изменятся вне процедуры.

.. sourcecode:: sql

    CREATE PROCEDURE sp_in(p VARCHAR(11)) SET @x = P;
    CALL sp_in('Hello world');
    SELECT @x


OUT
---

Значения не передаются, но могут быть изменены внутри процедуры, а также изменены вне процедуры.

.. sourcecode:: sql

    SET @x='Something';
    CREATE PROCEDURE sp_out(OUT p VARCHAR(10)) SET P='Hello world';
    CALL sp_out(@x);
    SELECT @x

INOUT
-----

Совмещает в себе свойства параметров IN и OUT. Значение может передаваться в процедуру, изменяться внутри процедуры и быть доступным вне процедуры.

.. sourcecode:: sql

    CREATE PROCEDURE sp_inout(INOUT P INT) SET @x=P*2;
    set @a = 5;
    CALL sp_inout(@a);
    SELECT @x

----

DELIMITER
=========

Хранимые процедуры mysql, конечно, не очень полезные если они содержат одну инструкцию.

Как же отличить инструкцию внутри процедуры от конца этой процедуры.

Для этого можно создать другой разделитель инструкции для конца оператора **CREATE PROCEDURE**.

Синтаксис
---------


.. sourcecode:: sql

    DELIMITER <строка/символ>


Пример
------

.. sourcecode:: sql

    SELECT VERSION();

    -- установить разделитель команд |
    DELIMITER |

    SELECT VERSION()|

Обратите внимание на то, что нет точки с запятой после символа «|», который будет использоваться в процедуре.

Разделитель необходимо выбарать такой, который не будет использоваться в процедуре, и он может содержать больше чем
один символ.

----

Команда SELECT ... INTO
=======================

Позволяет сохранить выбранные столбцы непосредственно в переменные

Синтаксис
---------

.. sourcecode:: sql

    SELECT <имя_поля1>[,<имя_поля2>,...]
       INTO <имя_переменной1,>[,<имя_переменной2>,...] <запрос>

Пример
------

.. sourcecode:: sql

    -- устанавливаем разделитель
    DELIMITER $$

    -- создаем процедуру
    CREATE PROCEDURE get_title(IN _id INT, OUT _title VARCHAR(255))
    BEGIN
        SELECT title INTO _title
            FROM t1 WHERE id=_id;
    END$$

    -- восстанавливаем стандартный разделитель
    DELIMITER ;

    SET @title = '';
    CALL get_title(1, @title);
    SELECT @title;

----

Условие IF в mysql
==================

Синтаксис
---------

.. sourcecode:: sql

    IF <условие> THEN
        <действие>;
    END IF;

.. image:: http://www.mysqltutorial.org/wp-content/uploads/2013/01/mysql-if-statement1.jpg

----


Условие IF в MS SQL
===================

Синтаксис
---------

.. sourcecode:: sql

    IF <условие> 
	[BEGIN]
        <действие>;
    [END]
	GO

.. https://msdn.microsoft.com/en-us/library/ms182587.aspx
	
----

Условие IF .. ELSE в mysql
==========================

Синтаксис
---------

.. sourcecode:: sql

    IF <условие> THEN
        <действие 1>;
    ELSE
        <действие 2>;
    END IF;

.. image:: http://www.mysqltutorial.org/wp-content/uploads/2013/01/mysql-if-else-statement.jpg

----

Условие IF .. ELSE в MS SQL
===========================

Синтаксис
---------

.. sourcecode:: sql

    IF <условие> 
	[BEGIN]
        <действие 1>;
	[END]
    ELSE
	[BEGIN]
        <действие 2>;
    [END]
	GO

.. https://msdn.microsoft.com/en-us/library/ms182587.aspx
	
----

Условие IF .. ELSEIF .. ELSE в mysql
====================================

Синтаксис
---------

.. sourcecode:: sql

    IF <условие 1> THEN
        <действие 1>;
    ELSEIF <условие 2> THEN
        <действие 2>;
    ...
    ELSE
        <действие n>;
    END IF;

.. image:: http://www.mysqltutorial.org/wp-content/uploads/2013/01/mysql-if-elseif-else-statement.jpg
    :width: 240px

----

Пример применения условий
=========================

.. sourcecode:: sql

    DELIMITER $$
    CREATE PROCEDURE GetCustomerLevel
    (
        IN  p_customerNumber INT(11),
        OUT p_customerLevel  VARCHAR(10)
    )
    BEGIN
        DECLARE creditlim DOUBLE;

        SELECT creditlimit INTO creditlim
            FROM customers
            WHERE customerNumber = p_customerNumber;

        IF creditlim > 50000 THEN
            SET p_customerLevel = 'PLATINUM';
        ELSEIF (creditlim <= 50000 AND creditlim >= 10000) THEN
            SET p_customerLevel = 'GOLD';
        ELSEIF creditlim < 10000 THEN
            SET p_customerLevel = 'SILVER';
        END IF;
    END$$

----

.. image:: http://www.mysqltutorial.org/wp-content/uploads/2013/01/mysql-if-statement-flow-chart.png

----

CASE
====

.. Besides the IF statement, MySQL provides an alternative conditional statement called CASE.
.. The MySQL CASE statement makes the code more readable and efficient.

Вместе с условными командами в MySQL применяются условные выражения **CASE**.

**CASE** выражения позволяют создать код более читабельным и эффективным.

.. There are two forms of the CASE statements: simple and searched CASE statements.

Существует две формы CASE выражений: простое и поисковое.

Простое CASE выражение
----------------------

В этом случае находится совпадение выражения с одним из уникальных значений и
выполнение соответствующих команд

.. sourcecode:: sql

    CASE  <выражение>
       WHEN <знечение 1> THEN <команды 1>
       WHEN <значение 2> THEN <команды 2>
       ...
       ELSE <команды n>
    END <CASE>;


----

Пример CASE
===========

.. sourcecode:: sql

    DELIMITER $$
    CREATE PROCEDURE GetCustomerShipping
    (
         IN  p_customerNumber INT(11),
         OUT p_shiping        VARCHAR(50)
    )
    BEGIN
        DECLARE customerCountry VARCHAR(50);

        SELECT country INTO customerCountry
             FROM customers
             WHERE customerNumber = p_customerNumber;

        CASE customerCountry
             WHEN  'USA' THEN
                SET p_shiping = '2-day Shipping';
             WHEN 'Canada' THEN
                SET p_shiping = '3-day Shipping';
             ELSE
                SET p_shiping = '5-day Shipping';
         END CASE;
    END$$

----

Пример CASE
===========


.. image:: http://www.mysqltutorial.org/wp-content/uploads/2013/01/mysql-case-statement.png

----

Поисковый CASE
==============

.. The simple CASE statement only allows you match a value of an expression against a set of distinct values. In order to perform more complex matches such as ranges, you use the searched CASE statement. The searched CASE statement is equivalent to the IF  statement, however, its construct is much more readable.

Простые **CASE** выражения позволяют находить только совпадения с уникальными значениями для некого выражения.

Для применения больее сложных условий используется поисковый варианты выражения **CASE**.

Он похож на условие **IF**, но имеет более читабельный вид.

Синтаксис
---------

.. sourcecode:: sql

    CASE
        WHEN <условие_1> THEN <команды_1>
        WHEN <условие_2> THEN <команды_2>
        ...
        ELSE <команды_n>
    END CASE;

----

Пример применения CASE
======================

.. sourcecode:: sql

    DELIMITER $$
    CREATE PROCEDURE GetCustomerLevel
    (
     IN  p_customerNumber INT(11),
     OUT p_customerLevel  VARCHAR(10)
    )
    BEGIN
        DECLARE creditlim DOUBLE;
        SELECT creditlimit INTO creditlim
            FROM customers
            WHERE customerNumber = p_customerNumber;
        CASE
            WHEN creditlim > 50000 THEN
                SET p_customerLevel = 'PLATINUM';
            WHEN (creditlim <= 50000 AND creditlim >= 10000) THEN
                SET p_customerLevel = 'GOLD';
            WHEN creditlim < 10000 THEN
                SET p_customerLevel = 'SILVER';
        END CASE;
    END$$

    CALL GetCustomerLevel(112,@level);
    SELECT @level AS 'Customer Level';


+----------------+
| Customer Level |
+================+
| PLATINUM       |
+----------------+

----

Цикл WHILE
==========

Запрос будет выполняться до тех пор, пока условие истинно.

.. sourcecode:: sql

    WHILE условие DO
        действие;
		[BREAK]
		действие;
		[CONTINUE]
    END WHILE;

.. image:: http://www.mysqltutorial.org/wp-content/uploads/2009/12/mysql-while-loop.jpg

----

Пример цикла WHILE
==================

.. sourcecode:: sql

    DELIMITER $$

    CREATE PROCEDURE test_mysql_while_loop()
    BEGIN
        DECLARE x  INT;
        DECLARE str  VARCHAR(255);

        SET x = 1;
        SET str =  '';

        WHILE x  <= 5 DO
            SET  str = CONCAT(str,x,',');
            SET  x = x + 1;
        END WHILE;

        SELECT str;
    END$$

    DELIMITER ;

    CALL test_mysql_while_loop();


+------------+
| str        |
+============+
| 1,2,3,4,5, |
+------------+

----

Цикл REPEAT
===========

Условие цикла проверяется не в начале, как в цикле **WHILE**, а в конце, т.е. хотя бы один раз, но цикл выполняется.

Сам же цикл выполняется, пока условие ложно.


Синтаксис
---------

.. sourcecode:: sql

    REPEAT <запрос>
    UNTIL <условие>
    END REPEAT

.. image:: http://www.mysqltutorial.org/wp-content/uploads/2009/12/mysql-repeat-loop.jpg

----

Пример цикла REPEAT
===================

.. sourcecode:: sql

    DELIMITER $$
    CREATE PROCEDURE mysql_test_repeat_loop()
    BEGIN
        DECLARE x INT;
        DECLARE str VARCHAR(255);

        SET x = 1;
        SET str =  '';

        REPEAT
            SET  str = CONCAT(str,x,',');
            SET  x = x + 1;
        UNTIL x  > 5
        END REPEAT;

        SELECT str;
    END$$
    DELIMITER ;

----

Цикл LOOP
=========

Этот цикл вообще не имеет условий (бесконечный цикл), поэтому обязательно должен иметь оператор **LEAVE**
(аналог break) для прекращения цикла.

Также может быть использована команда **ITERATE** (аналог continue) для перехода к следующей итерации



Синтаксис
---------

.. sourcecode:: sql

    LOOP запрос
    END LOOP

----

Пример цикла LOOP
=================

.. sourcecode:: sql

    DELIMITER $$
    CREATE PROCEDURE test_mysql_loop()
    BEGIN
        DECLARE x  INT;
        DECLARE str  VARCHAR(255);

        SET x = 1;
        SET str =  '';

        loop_label:  LOOP
        IF  x > 10 THEN
            LEAVE  loop_label;
        END  IF;
        SET  x = x + 1;

        IF  (x mod 2) THEN
            ITERATE  loop_label;
        ELSE
            SET  str = CONCAT(str,x,',');
        END  IF;
        END LOOP;
        SELECT str;
    END;

----

Сохраненные функции
===================

.. http://www.mysqltutorial.org/mysql-stored-function/

..
    A stored function is a special kind stored program that returns a single value.
    You use stored functions to encapsulate common formulas or business rules that
    are reusable among SQL statements or stored programs.

Сохраненные функции это подпрограммы, которые возвращают скалярное значение.

..
    Different from a stored procedure, you can use a stored function in SQL
    statements wherever an expression is used. This helps improve the
    readability and maintainability of the procedural code.

Отличие от сохраненных процедур заключается в том, что функцию возможно
применять в SQL запросах. Это позволяет улучшить читабельность и подержку
процедурного кода.

.. Stored function syntax

Синтаксис
---------

.. The following illustrates the simplest syntax for creating a new stored function:

Следующий пример демонстрирует синтаксис создания новой сохраненной функции.

.. sourcecode:: sql

    CREATE FUNCTION <имя_функции>(<параметр_1>,<параметр_2>,…)
        RETURNS <тип_данных>
        [NOT] DETERMINISTIC
        <тело_функции>

Параметр **DETERMINISTIC** определяет функция детерминированная или недетерминированная.

Для детерминированных функций разрешается доступ к локальным данным.

Например, функция, которая при вызове с одними и теми же параметрами и в одном
том же состоянии базы данных всегда возвращает один и тот же результат,
называется детерминированной.

----

Пример создания функции
=======================

..
    The following example is a function that returns the level of a customer based on credit limit.
    We use the IF statement to decide the credit limit.

.. sourcecode:: sql

    DELIMITER $$
    CREATE FUNCTION CustomerLevel(p_creditLimit double) RETURNS VARCHAR(10)
        DETERMINISTIC
    BEGIN
        DECLARE lvl varchar(10);

        IF p_creditLimit > 50000 THEN
            SET lvl = 'PLATINUM';
        ELSEIF (p_creditLimit <= 50000 AND p_creditLimit >= 10000) THEN
            SET lvl = 'GOLD';
        ELSEIF p_creditLimit < 10000 THEN
            SET lvl = 'SILVER';
        END IF;
     RETURN (lvl);
    END$$

.. Now, we can call the CustomerLevel() in an SQL SELECT statement as follows:

Теперь можно вызвать функцию CustomerLevel() в SQL запросе следующим образом:

.. sourcecode:: sql

    SELECT
        customerName, CustomerLevel(creditLimit)
    FROM
        customers
    ORDER BY customerName;

----

Хранимые функции Transact-SQL
-----------------------------

.. http://www.flenov.info/books.php?contentid=42

Сервер SQL поддерживает три типа функций определенных пользователем:

* Скалярные функции – похожи на встроенные функции;
* Функция, возвращающая таблицу - возвращает результат единичного оператора SELECT. 
  Он похож на объект просмотра, но имеет большую эластичность благодаря использованию параметров, 
  и расширяет возможности индексированного объекта просмотра;
* Многооператорная функция - возвращает таблицу созданную одним или несколькими операторами 
  Transact-SQL, чем напоминает хранимые процедуры. В отличие от процедур, на такие функции можно 
  ссылаться в WHERE как на объект просмотра.

----

Создание хранимой функции в MS SQL
----------------------------------

Скалярная функция:
~~~~~~~~~~~~~~~~~~ 

.. sourcecode:: sql

	CREATE  FUNCTION [ owner_name. ] function_name 
		( [ { @parameter_name [AS] scalar_parameter_data_type [ = default ] } 
		  [ ,...n ] ] ) 

	RETURNS scalar_return_data_type

	[ WITH < function_option> [ [,] ...n] ] 

	[ AS ]

	BEGIN 
		function_body 
		RETURN scalar_expression
	END

----

Пример создания скалярной функции
---------------------------------

.. sourcecode:: sql

	CREATE FUNCTION GetSumm
	 (@name varchar(50), @date datetime)
	RETURNS numeric(10,2)
	 BEGIN
	  DECLARE @Summ numeric(10,2)
	  SELECT @Summ = Цена*Количество
	  FROM Товары
	  WHERE [Название товара]=@name
		AND Дата=@date;
	  RETURN @Summ
	 END
	 
Использование функций
---------------------

Как выполнить такую функцию? Да также, как и многие другие системные функции (например, GETDATE()). 
Например, следующий пример использует функцию в операторе SELECT:

.. sourcecode:: sql

	SELECT dbo.GetSumm('Картофель', '03.03.2017')

Функции можно использовать и напрямую, присваивая значение переменной. Например: 	

.. sourcecode:: sql

	DECLARE @Summ numeric(10,2)
	SET @Summ=dbo.GetSumm('Картофель', '03.03.2005')
	PRINT @Summ
	
----

Функция, возвращающая таблицу:
------------------------------

.. sourcecode:: sql

	CREATE FUNCTION [ owner_name. ] function_name 
		( [ { @parameter_name [AS] scalar_parameter_data_type [ = default ] } 
		 [ ,...n ] ] ) 

	RETURNS TABLE 

	[ WITH < function_option > [ [,] ...n ] ] 

	[ AS ] 

	RETURN [ ( ] select-stmt [ ) ]

----

Пример функции
--------------

Рассмотрим пример функции возвращающая таблицу:

.. sourcecode:: sql

	CREATE FUNCTION GetPrice()
	RETURNS TABLE
	AS
	 RETURN 
	 (
	  SELECT Дата, [Название товара], Цена, 
		Количество, Цена*Количество AS Сумма
	  FROM Товары
	 )
	 
Посмотрим, как можно использовать такую функцию с помощью оператора SELECT: 

.. sourcecode:: sql

	SELECT * FROM GetPrice()

----

Многооператорные функции:
-------------------------

.. sourcecode:: sql

	CREATE FUNCTION [ owner_name. ] function_name 
		( [ { @parameter_name [AS] scalar_parameter_data_type [ = default ] } 
		 [ ,...n ] ] ) 

	RETURNS @return_variable TABLE < table_type_definition > 

	[ WITH < function_option > [ [,] ...n ] ] 

	[ AS ] 

	BEGIN 
		function_body 
		RETURN
	END

	< function_option > ::= 
		{ ENCRYPTION | SCHEMABINDING }

	< table_type_definition > :: = 
		( { column_definition | table_constraint } [ ,...n ] ) 

----

Изменения и удаление
====================

Изменение подпрограмм
---------------------

Эта инструкция может использоваться, чтобы изменить характеристики сохраненной процедуры или функции. 

.. sourcecode:: sql

    ALTER {PROCEDURE | FUNCTION} <имя_подпрограммы>


Удаление подпрограмм
====================

Эта инструкция используется, чтобы удалить сохраненную процедуру или функцию. То есть определенная подпрограмма будет удалена с сервера.

.. sourcecode:: sql

    DROP {PROCEDURE | FUNCTION} [IF EXISTS] <имя_подпрограммы>

----

Перечень подпрограмм в MySQL
============================

Для отображения сохраненных подпрограмм в СУБД используется команда:

Синтаксис
---------


.. sourcecode:: sql

    SHOW PROCEDURE | FUNCTION STATUS [LIKE 'pattern' | WHERE expr];

Пример
------

Для ограничения вывода применяются команды **LIKE** и **WHERE**:
Наример, для отображения процедур базы данных **northwind**:

.. sourcecode:: sql

    SHOW PROCEDURE STATUS WHERE db = 'northwind';

Для отображения исходного кода подпрограмм используют команды:

Синтаксис
---------

.. sourcecode:: sql

    SHOW CREATE PROCEDURE <имя_процедуры>;

Пример
------

Отобразить исходный код процедуры CustOrderHist:

.. sourcecode:: sql

    SHOW CREATE PROCEDURE northwind.CustOrderHist;

----

Триггеры
========

**Триггер** представляет собой хранимую процедуру, которая активизируется
при наступлении определенного события.

..
    Например, можно задать хранимую процедуру, которая срабатывает каждый раз
    при удалении записи из транзакционной таблицы - таким образом,
    обеспечивается автоматическое удаление соответствующего заказчика из
    таблицы заказчиков, когда все его транзакции удаляются.

Синтаксис создания триггера
---------------------------

.. sourcecode:: sql

    CREATE
        [DEFINER = { <имя_ пользователя> | CURRENT_USER }]
        TRIGGER <имя_триггера> <время_триггера> <событие_срабатывания>
        ON <имя_таблицы> FOR EACH ROW <выражение>

время_триггера
--------------

Определяет время свершения действия триггера:

**BEFORE** означает, что триггер выполнится до завершения события срабатывания триггера,
а **AFTER** означает, что после.

.. Например, при вставке записей (см. пример выше) наш триггер срабатывал до
   фактической вставки записи и вычислял сумму.

.. Такой вариант уместен при предварительном вычислении каких-то дополнительных
   полей в таблице или параллельной вставке в другую таблицу.

событие_срабатывания
--------------------

Обозначает при каком событии выполняется триггер:

**INSERT** т.е. при операциях вставки или аналогичных ей выражениях (INSERT, LOAD DATA, и REPLACE)

**UPDATE** когда сущность (строка) модифицирована

**DELETE** когда запись удаляется (запросы, содержащие выражения DELETE и/или REPLACE)

----

Пример работы с триггером
=========================

Создаем тестовую базу данных
----------------------------

.. sourcecode:: sql

    DROP DATABASE IF EXISTS test;
    CREATE DATABASE test;
    USE test;

    -- таблица, за которой мы будем следить
    CREATE TABLE test 
    (
        id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
        content TEXT NOT NULL 
    );

Создаем таблицу с журналом изменений
------------------------------------

.. sourcecode:: sql

    -- лог
    CREATE TABLE log 
    (
        id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
        msg VARCHAR( 255 ) NOT NULL,
        time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        row_id INT NOT NULL,
        content TEXT NOT NULL 
    );

----

Пример работы с триггером
=========================

Создаем триггеры
----------------

.. sourcecode:: sql

    -- триггеры
    DELIMITER |

    CREATE TRIGGER insert_test AFTER INSERT ON test
    FOR EACH ROW BEGIN
       INSERT INTO log 
            SET msg='insert', row_id = NEW.id, content = NEW.content;
    END|

    CREATE TRIGGER update_test before update ON test
    FOR EACH ROW BEGIN
      INSERT INTO log 
            SET msg='update', row_id = OLD.id, content = OLD.content;
    END|

    CREATE TRIGGER delete_test before delete ON test
    FOR EACH ROW BEGIN
      INSERT INTO log 
            SET msg='delete', row_id = OLD.id, content = OLD.content;
    END|

    DELIMITER ;

----

Проверяем работу триггеров
==========================

.. sourcecode:: sql

    INSERT INTO test(content) VALUES('It content was added');
    UPDATE test SET content='new updated content' WHERE id=1;
    DELETE FROM test where id=1;
    SELECT * FROM log;



+----+--------+-------------+--------+----------------------+
| id | msg    | time        | row_id | content              |
+====+========+=============+========+======================+
|  1 | insert | 2015-12-27  |      1 | It content was added |
+----+--------+-------------+--------+----------------------+
|  2 | update | 2015-12-27  |      1 | It content was added |
+----+--------+-------------+--------+----------------------+
|  3 | delete | 2015-12-27  |      1 | new updated content  |
+----+--------+-------------+--------+----------------------+


----

Список созданных триггеров
==========================

Показать триггер можно с помощью команды

.. sourcecode:: sql

    SHOW TRIGGERS [{FROM | IN} <база_данных>]
        [LIKE '<шаблон>' | WHERE <выражение>]
 
Это полная часть команды, в основном пользуются командами:
 
.. sourcecode:: sql

    SHOW TRIGGERS [FROM <база_данных>] [LIKE '<шаблон>']

или

.. sourcecode:: sql

    SHOW TRIGGERS

----

Удаление триггера
-----------------

Для удаления триггера используется, как обычно оператор, DROP, пример


.. sourcecode:: sql

    DROP TRIGGER [IF EXISTS] <имя_триггера> 

----

Домашнее задание
================

- Создать процедуру добавления нового фильма в базу данных.
  Предусмотреть возможность установления корректных связей
  между таблицами Movies <-> Generes, Movies <-> Actors, Movies->Directors.

- Создать функцию вычисления возвраста (актеров и режисеров) по дате рождения.
  Для вычисления разницы между двумя датами в годах воспользоваться кодом: 

.. sourcecode:: sql

   DATE_FORMAT(FROM_DAYS(TO_DAYS(now()) - TO_DAYS(@dateofbirth)), '%Y') + 0;

- Создать триггер для журналирования событий изменений (INSERT, UPDATE, DELETE) в таблице Movies.


----

Полезные ссылки
===============

- `MySQL Stored Procedures`_
- `CREATE PROCEDURE (Transact-SQL)`_
- `CREATE PROCEDURE Oracle Database Online Documentation`_
- `Хранимые процедуры и триггеры`_
- `Хранимые процедуры и триггеры. Активные базы данных`_
- `Работа с trigger (триггерами) в MySQL`_
- `Transact-SQL В подлиннике`_

.. _Transact-SQL В подлиннике: http://www.flenov.info/books.php?id=10

.. _MySQL Stored Procedures:  http://www.peregrinesalon.com/wp-content/uploads/2009/03/mysql-stored-procedures.pdf

.. _CREATE PROCEDURE (Transact-SQL): https://msdn.microsoft.com/ru-ru/library/ms187926(v=sql.120).aspx

.. _CREATE PROCEDURE Oracle Database Online Documentation: https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_6009.htm

.. _Хранимые процедуры и триггеры: http://www.zoonman.ru/library/mysql_sr_and_t.htm

.. _Хранимые процедуры и триггеры. Активные базы данных:  http://web.znu.edu.ua/lab/econom/dba/lectures/ADBS_lect5.pdf

.. _Работа с trigger (триггерами) в MySQL: http://blog.nagaychenko.com/2009/12/02/%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-trigger-%D1%82%D1%80%D0%B8%D0%B3%D0%B3%D0%B5%D1%80%D0%B0%D0%BC%D0%B8-%D0%B2-mysql/

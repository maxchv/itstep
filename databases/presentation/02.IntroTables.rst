Работа с таблицами б/д
======================

-------------

Модель реляционной базы данны
=============================

Каждая таблица реляционной б/д должна состоять из полей, которые содержат
характеристики данных и записи со значениями.

Каждая таблица должна содержать первичный ключ (primary key) - значение, которое
уникально идентифицирует каждую запись в пределах таблицы.

=========  =======  ==========  ===============  ============  ===============
EmloyeeID   FName      LName       Position       Department   PhoneDepartment
=========  =======  ==========  ===============  ============  ===============
   01       Вася      Пупкин        Инженер         115          21-21-21

   02       Вова      Петров        Инженер         126          36-32-21

   03       Петя      Головач    Администратор      126          36-21-21
=========  =======  ==========  ===============  ============  ===============

-------------

Связи между таблицами
=====================

Связи между таблицами осуществляются за счет добавления к таблице внешнего ключа (foreingn key).
**Внешним ключом** таблицы называют поле, значение которого совпадает со значением поля с первичным ключом другой таблицы.

.. image:: http://osiprodeaodcspstoa01.blob.core.windows.net/ru-ru/media/2b3f79b2-7629-44f8-a0c5-2c6f72bfd935.gif
    :height: 200px

Существуют следующие типы связей между таблицами:

#. Один к одному
#. Один ко многим
#. Много к одному
#. Много ко многим

-------------


Пример таблиц б/д
=================


.. http://edu.tltsu.ru/er/book_view.php?book_id=2790&page_id=31348

.. tabularcolumns:: |l|c|c|c|c|

Таблица СТУДЕНТ

===================  ==========  ======  ===========  ========

 Номер личного дела   Фамилия     Имя     Отчество     Группа

===================  ==========  ======  ===========  ========
 120603               Свиридова   Анна    Алексеевна   ЭТ-101 

 120608               Голубев     Игорь   Андреевич    ЭТ-102

 ...                  ...         ...     ...          ...
===================  ==========  ======  ===========  ========

Таблица СЕССИЯ

===================  ==========  =========   ==========  =========

Номер личного дела   Экзамен 1   Экзамен 2   Экзамен 3   Результат

===================  ==========  =========   ==========  =========
120603               3           4           4           0

120608               5           5           5           2

120634               4           5           4           1

...                  ...         ...         ...         ...
===================  ==========  =========   ==========  =========

Таблица СТИПЕНДИЯ

=========  =======

Результат  Процент  

=========  =======
0           0

1           100

2           200
=========  =======


-------------

Связь один к одному
===================

.. Каждой записи в родительской таблице соответствует только одна запись дочерней таблицы (или наоборот).

Таблицы А и В находятся в отношении «один-к-одному», если каждая запись в таблице А может иметь 
не более одной связанной с ней записи в таблице В и наоборот, каждая запись в таблице В может иметь не более 
одной связанной с ней записи в таблице А.

.. image:: http://edu.tltsu.ru/er/er_files/page11431/img/image007.jpg 
    :height: 200px

-------------

Один ко многим
==============

Таблицы А и В находятся в отношении «один-ко-многим», если каждая запись в таблице А может быть 
связана с несколькими записями таблицы В, но каждая запись в таблице В не может быть связана более чем 
с одной записью таблицы А. Таблица А в этом случае называется главной таблицей, а таблица В – подчиненной.

.. image:: http://edu.tltsu.ru/er/er_files/page11431/img/image008.jpg
    :height: 200px

-------------

Много ко многим
===============

Таблицы А и В находятся в отношении «многие-ко-многим», если каждая запись таблицы А может быть связана 
с несколькими записями в таблице В, и наоборот, каждая запись таблицы В может быть связана с несколькими 
записями в таблице А.

.. image:: http://edu.tltsu.ru/er/er_files/page27985/img/image055.jpg
    :height: 200px


-------------

Проектирование реляционной б/д
==============================

В процессе разработки базы данных можно выделить следующие этапы:

1. Анализ предметной области
----------------------------
    
На этом этапе формируется задание по созданию БД. В нем подробно описывается состав базы данных, назначение и цели 
ее создания, а также перечисляется, какие виды работ предполагается осуществлять в этой базе данных 
(отбор, изменение данных, печать или вывод отчета и т. д.).
   
2. Разработка схемы данных БД
-----------------------------
           
На этом этапе рассматривается, из каких информационных объектов должна состоять БД, какими реквизитами описывается 
каждый объект. Затем определяется структура реляционных таблиц БД с указанием свойств полей и связей между таблицами.
    
-------------

Проектирование реляционной б/д
==============================

3. Создание неопсредственно базы данных
---------------------------------------

#. Создание базы данных.
#. Создание исходной таблицы или таблиц.
#. Заполнение данными таблиц БД.
#. Работа с созданной базой данных:

* сортировка, фильтрация и поиск записей в таблице;
* отбор данных из таблиц в соответствии с заданными критериями отбора;
* выполнение обработки данных (удаление, добавление, изменение данных, выполнение вычислений).

-------------

Разработка схемы данных
=======================

Разработку схемы данных обычно выполняют в следующей последовательности:

1. Составляется общий список полей, отражающий реквизиты информационных объектов б/д.
2. В соответствии с типом данных, размещаемых в каждом поле, определяют тип и другие свойства каждого поля.
3. Поля общего списка распределяются по базовым таблицам. Критерии распределения полей по таблицам могут быть различными. 
   
Например, сведения о сотрудниках организации могут храниться в одной таблице или могут быть созданы две таблицы, 
одна из которых хранит информацию служебного назначения (СОТРУДНИКИ), а другая – информацию личного плана (ЛИЧНЫЕ ДАННЫЕ)

-------------

Нормализация таблиц
===================

    `Нормализация <https://support.microsoft.com/ru-ru/kb/283878>`_
    — это процесс организации данных в базе данных, включающий создание таблиц и установление отношений 
    между ними в соответствии с правилами, которые обеспечивают защиту данных и делают базу данных более гибкой, 
    устраняя **избыточность** и **несогласованные** зависимости. 

Существует несколько правил нормализации баз данных. 

Каждое правило называется «нормальной формой». 

Если выполняется первое правило, говорят, что база данных представлена в «первой нормальной форме». 

Если выполняются три первых правила, считается, что база данных представлена в «третьей нормальной форме». 

Есть и другие уровни нормализации, однако для большинства приложений достаточно нормализовать базы данных 
до третьей нормальной формы.

-------------

Первая нормальная форма
=======================

1. Устраните повторяющиеся группы в отдельных таблицах.

2. Создайте отдельную таблицу для каждого набора связанных данных.

3. Идентифицируйте каждый набор связанных данных с помощью первичного ключа.

Не используйте несколько полей в одной таблице для хранения похожих данных. 
Например, для слежения за товаром, который закупается у двух разных поставщиков, 
можно создать запись с полями, определяющими код первого поставщика и код второго поставщика.

Что произойдет при добавлении третьего поставщика? Добавление третьего поля нежелательно, 
так как для этого нужно изменять программу и таблицу, поэтому данный способ плохо адаптируется 
к динамическому изменению числа поставщиков. 

Вместо этого можно поместить все сведения о поставщиках в отдельную таблицу Vendors (поставщики) и 
связать товары с поставщиками с помощью кодов товаров или поставщиков с товарами с помощью кодов поставщиков.

-------------

Вторая нормальная форма
=======================

1. Создайте отдельные таблицы для наборов значений, относящихся к нескольким записям.
2. Свяжите эти таблицы с помощью внешнего ключа.

Записи могут зависеть только от первичного ключа таблицы (составного ключа, если необходимо). 

Возьмем для примера адрес клиента в системе бухгалтерского учета. Этот адрес необходим не только 
таблице Customers, но и таблицам Orders, Shipping, Invoices, Accounts Receivable и Collections.

Вместо того чтобы хранить адрес клиента как отдельный элемент в каждой из этих таблиц, храните его 
в одном месте: или в таблице Customers, или в отдельной таблице Addresses.

-------------

Третья нормальная форма
=======================

1. Устраните поля, не зависящие от ключа.

Значения, входящие в запись и не являющиеся частью ключа этой записи, не принадлежат таблице. 
Если содержимое группы полей может относиться более чем к одной записи в таблице, подумайте о том, 
не поместить ли эти поля в отдельную таблицу. 

Например, в таблицу Employee Recruitment (наем сотрудников) можно включить адрес кандидата и название университета, 
в котором он получил образование. Однако для организации групповой почтовой рассылки необходим полный список университетов. 

Если сведения об университетах будут храниться в таблице Candidates, составить список университетов при отсутствии кандидатов 
не получится. 

Таким образом, создайте вместо этого отдельную таблицу Universities и свяжите ее с таблицей 
Candidates при помощи ключа — кода университета. 

    Выполнять нормализацию до третьей нормальной формы может быть целесообразно только для часто изменяемых данных. 
    Если при этом сохранятся зависимые поля, спроектируйте приложение так, чтобы при изменении одного из этих полей 
    пользователь должен был проверить все связанные поля.


-------------

Пример нормализации таблицы
===========================

Ниже приведен пример нормализации таблицы с вымышленными данными о студентах.
Таблица до нормализации: 

========    =======    ========    ======  ======  ======
Student#    Advisor    Adv-Room    Class1  Class2  Class3
========    =======    ========    ======  ======  ======
1022        Петров      412        101-07  143-01  159-02

4123        Иванов      216        201-01  211-02  214-01
========    =======    ========    ======  ======  ======

-------------

Первая нормальная форма
=======================

Устранение повторяющихся групп
------------------------------

Таблицы должны иметь только два измерения. 
Так как один студент изучает несколько курсов, эти курсы следует указать в отдельной таблице. 

Наличие полей Class1, Class2 и Class3 в приведенных выше записях свидетельствует о неудачном проектировании таблицы. 

Электронные таблицы часто включают третье измерение, но в таблицах баз данных оно использоваться не должно. 

Рассмотреть эту проблему можно также с помощью отношения «один — множество», тогда совет можно сформулировать следующим образом: 
не включайте в одну таблицу элементы, представляющие обе стороны данного отношения. 
Вместо этого создайте другую таблицу в первой нормальной форме, устранив повторяющуюся группу (Class#):

========  =======  ========  ======
Student#  Advisor  Adv-Room  Class#
========  =======  ========  ======
    1022  Петров   412       101-07
    1022  Петров   412       143-01
    1022  Петров   412       159-02
    4123  Иванов   216       201-01
    4123  Иванов   216       211-02
    4123  Иванов   216       214-01
========  =======  ========  ======

-------------

Вторая нормальная форма
=======================

Устранение избыточных данных
----------------------------

Обратите внимание на то, что в приведенной выше таблице каждое значение Student# сопоставлено с несколькими значениями Class#. 
Значения Class# функционально не зависят от значений Student# (первичный ключ), а это означает, что данное отношение 
не нормализовано до второй нормальной формы.

Вторую нормальную форму представляют две следующих таблицы. 

Таблица Students:

========  =======  ========
Student#  Advisor  Adv-Room
========  =======  ========
1022      Петров   412

4123      Иванов   216
========  =======  ========


Таблица Registration:

========  ======
Student#  Class#
========  ======
1022      101-07

1022      143-01

1022      159-02

4123      201-01

4123      211-02

4123      214-01
========  ======

-------------

Третья нормальная форма 
=======================

Устранение данных, не зависящих от ключа
----------------------------------------

В последнем примере значения Adv-Room (номер кабинета научного руководителя) функционально зависят от атрибута Advisor. 
Решить эту проблему можно, переместив данный атрибут из таблицы Students в таблицу Faculty (факультет):

.. notes:: notes

Таблица Students:

========  =======
Student#  Advisor
========  =======
1022      Петров

4123      Иванов
========  =======


Таблица Faculty:

======  ======  ====
Name    Room    Dept
======  ======  ====
Петров  412     42

Иванов  216     42
======  ======  ====


-------------

Задание
=======

.. http://club.shelek.ru/viewart.php?id=177
=============== =========== =========================== ================ =============== =========== ===============================================
Наим.           Город       Адрес                       Эл. почта        WWW             Вид         Конт. лица
=============== =========== =========================== ================ =============== =========== ===============================================
Поршневой з-д   Владимир    Ул. 2-я Кольцевая, 17       info@plunger.ru  www.plunger.ru  Поставщик   Иванов И.И., зам. дир., тел (3254)76-15-95
                                                                                                     Петров П.П., нач. отд. сбыта, тел (3254)76-15-35

ООО Вымпел      Курск       Ул. Гоголя, 25              pennon@mail.ru   NULL            Клиент      Сидоров С.С., директор, тел. (7634)66-65-38

ИЧП Альфа       Владимир    Ул. Пушкинская, 37, оф. 565 alpha323@list.ru NULL            Клиент      Васильев В.В., директор, тел (3254)74-57-45
=============== =========== =========================== ================ =============== =========== ===============================================


-------------

Домашнее задание
================

.. http://edu.tltsu.ru/er/book_view.php?book_id=2790&page_id=31359

Разработать базу данных Кадры предсавленную таблицами:

.. image:: http://edu.tltsu.ru/er/er_files/page27995/img/image103.jpg

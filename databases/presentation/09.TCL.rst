
============================
Transaction Control Language
============================

----

TCL
===

Transaction Contrlol Language - это группа команд по работе с транзакциями.
К ним относятся:

1. BEGIN TRANSACTION — начать транзакцию;
2. COMMIT — принять изменения внесенные текущей транзакцией;
3. ROLLBACK — откат.

Что такое транзакции?
---------------------

Современные СУБД являются многопользовательскими. Следовательно, всегда есть
возможность одновременного обращения нескольких пользователей к одной базе данных, и
даже – к одним и тем же данным. 

При этом возникает масса проблем, связанных с попытками одновременного изменения или удаления данных. 

Без применения команд TCL у нас отсутсвует контролироль изменений в базе данных.

.. Transactions are like event whenever something happen in database, like updating or deleting then sql server holds that occurrence in Transaction lock.

**Транзакции** (Transactions) - это какие-либо действия происходящие в базе данных, такие как 
обновление или удаление данных, для которых сервер базы данных накладывает **блокировку**.

**Блокировка (lock)** – временно накладываемое ограничение на выполнение
некоторых операций обработки данных.

.. Normally without TCL we don’t have opportunity to control any changes that happen in database and record can permanently store in database.

В транзакцию может быть включено от одной до нескольких тысяч команд.

----

ACID
====

Управления транзакциями основывается на требованиях ACID.

.. Требования ACID были в основном сформулированы в конце 70-х годов Джимом Греем.

1. Атомарность (Atomicity)
2. Согласованность (Consistency)
3. Изолированность (Isolation)
4. Долговечность (Durability)

Атомарность
-----------

**Атомарность** гарантирует, что никакая транзакция *не будет* зафиксирована в системе частично. 
Будут либо выполнены все её подоперации, либо не выполнено ни одной. 
Поскольку на практике невозможно одновременно и атомарно выполнить всю последовательность операций 
внутри транзакции, вводится понятие «отката» (**rollback**): если транзакцию не удаётся полностью завершить, 
результаты всех её до сих пор произведённых действий будут отменены и система вернётся во 
«внешне исходное» состояние — со стороны будет казаться, что транзакции и не было. 

Согласованность
---------------

Транзакция, достигающая своего нормального завершения (EOT — end of transaction, завершение транзакции) и, тем самым, фиксирующая свои результаты, сохраняет согласованность базы данных. 
Другими словами, каждая успешная транзакция по определению фиксирует только допустимые результаты. Это условие является необходимым для поддержки четвёртого свойства.

----

ACID
====

Изолированность
---------------

Во время выполнения транзакции параллельные транзакции не должны оказывать влияние на её результат. 
Изолированность — требование дорогое, поэтому в реальных БД существуют режимы, не полностью изолирующие транзакцию.

Долговечность
-------------

Независимо от проблем на нижних уровнях (к примеру, обесточивание системы или сбои в оборудовании) изменения, сделанные успешно завершённой транзакцией, должны остаться сохранёнными после возвращения системы в работу. 

Другими словами, если пользователь получил подтверждение от системы, что транзакция выполнена, он может быть уверен, что сделанные им изменения не будут отменены из-за какого-либо сбоя.

----

TCL в MySQL
===========

.. These statements provide control over use of transactions :

Следующие команды предоставляют контноль над транзакциями:

1. Команды **START TRANSACTION** или **BEGIN** начинают новую транзакцию.
2. Команда **COMMIT** принимает изменения текущей транзакции. 
3. Команда **ROLLBACK** позволяет откатить изменения текущей транзакции.
4. Команда **SET autocommit** в mysql (**SET IMPLICIT_TRANSACTION** в MS SQL) включает или выключает автоматическое 
   применение изменений (autocommit) текущей сессии.


По умолчанию MySQL и MS SQL работает в режиме автоматических транзакций. 
Это означает, что при выполнении обновления данных СУБД будет сразу записывать обновленные данные 
на диск.

При использовании таблиц, поддерживающих транзакции (таких как InnoDB, BDB), в MySQL можно отключить 
режим автоматичских транзакций в mysql при помощи следующей команды:

.. code-block:: sql

    SET AUTOCOMMIT=0
	
Для выключения данного режима в MS SQL используется команда:

.. code-block:: sql

	SET IMPLICIT_TRANSACTION OFF 

После этого необходимо применить команду COMMIT для записи изменений на диск или команду ROLLBACK, 
которая позволяет игнорировать изменения, произведенные с начала данной транзакции.

----

Пример:
-------

Рассмотрим таблицу:

.. code-block:: sql

..    SELECT * FROM students;

+------------+------------------+----------+
| student_id | name             | st_class |
+============+==================+==========+
|          1 | Neena  Kochhar   |        9 |
+------------+------------------+----------+
|          2 | Lex  De Haan     |        9 |
+------------+------------------+----------+
|          3 | Alexander Hunold |       11 |
+------------+------------------+----------+

.. Let execute an update command :

Обновляем данные:

.. code-block:: sql

    UPDATE students SET st_class=8 WHERE student_id=3;
..    SELECT * FROM students;

+------------+------------------+----------+
| student_id | name             | st_class |
+============+==================+==========+
|          1 | Neena  Kochhar   |        9 |
+------------+------------------+----------+
|          2 | Lex  De Haan     |        9 |
+------------+------------------+----------+
|          3 | Alexander Hunold |   **8**  |
+------------+------------------+----------+

.. Now execute the ROLLBACK command to return in previous stage :

Теперь попытаемся откатить изменения до пердыдущего состояния:

.. code-block:: sql
    
    ROLLBACK WORK;
..    SELECT * FROM students;

+------------+------------------+----------+
| student_id | name             | st_class |
+============+==================+==========+
|          1 | Neena  Kochhar   |        9 |
+------------+------------------+----------+
|          2 | Lex  De Haan     |        9 |
+------------+------------------+----------+
|          3 | Alexander Hunold |   **8**  |
+------------+------------------+----------+

.. There is no roll back as MySQL runs with autocommit mode enabled.

Но, никакого отката не произошло т.к. MySQL выполнял команды с включенным autocommit.

----

ROLLBACK
========

.. To disable autocommit mode, use the START TRANSACTION statement. See the following example :

Для отмены режима автоматического применения изменений применим команду **BEGIN TRANSACTION**:

.. code-block:: sql
    
    -- старт транзакции
    BEGIN TRANSACTION; -- или START TRANSACTION;
    -- обновление данных
    UPDATE students SET st_class=10 WHERE student_id=3;
    SELECT * FROM students;

+------------+------------------+----------+
| student_id | name             | st_class |
+============+==================+==========+
|          1 | Neena  Kochhar   |        9 |
+------------+------------------+----------+
|          2 | Lex  De Haan     |        9 |
+------------+------------------+----------+
|          3 | Alexander Hunold |  **10**  |
+------------+------------------+----------+

Для отката всех изменений транзакции применим оператор **ROLLBACK**:

.. code-block:: sql

    -- откат
    ROLLBACK WORK;
    SELECT * FROM students;

+------------+------------------+----------+
| student_id | name             | st_class |
+============+==================+==========+
|          1 | Neena  Kochhar   |        9 |
+------------+------------------+----------+
|          2 | Lex  De Haan     |        9 |
+------------+------------------+----------+
|          3 | Alexander Hunold |   **8**  |
+------------+------------------+----------+

----

Ограничения ROLLBACK
====================

При использовании таблиц, не поддерживающих транзакции, изменения будут записаны сразу же, независимо от статуса режима autocommit.

Не все командны могут применяться в транзакциях.

Следующие команды автоматически завершают транзакцию (как если бы перед выполнением данной команды была сделана операция COMMIT ):

1. ALTER TABLE	
2. DROP DATABASE
3. DROP TABLE
4. RENAME TABLE
5. BEGIN	
6. CREATE INDEX
7. TRUNCATE

----

COMMIT
======

**COMMIT** (в переводе с англ. «принимать») — оператор управления транзакциями языка SQL для успешного завершения транзакции. 

При выполнении оператора изменения, сделанные от начала транзакции и ранее не видимые для других транзакций, фиксируются в базе данных.

Пример
------

.. code-block:: sql

    BEGIN TRANSACTION;
    -- Добавление новой строки в таблицу books. 
    INSERT INTO books (title, author, year, description) 
        VALUES ('Новая книга', 'Василий Ежиков', 2005, 'Книга о новом');
    -- Принять изменения.
    COMMIT WORK;

    --Добавление новой строки в таблицу books. 
    BEGIN TRANSACTION;
    INSERT INTO books (title, author, year, description) 
        VALUES ('Новая книга', 'Василий Ежиков', 2005, 'Книга о новом');
    -- Удаление записи.
    DELETE FROM books WHERE id=3;
    --  Откатить все изменения.
    ROLLBACK WORK;

----

Вложенные транзакции
====================

Для работы с вложенными транзакциями полезно задавать им имена:

.. code-block:: sql

	BEGIN TRANSACTION T1

	-- Вставляем строку данных в таблицу товаров
	INSERT INTO Товары (Дата, [Название товара], Цена, Количество)
		VALUES ('4.3.2005', 'МОРКОВЬ', 11.30, 1)

	-- Начинаем транзакцию 2
	BEGIN TRANSACTION T2 

	-- Обновить данные в последней строке
	UPDATE Товары SET Цена = 14
		WHERE [Название товара] LIKE 'МОРКОВЬ'

	COMMIT TRANSACTION T2

	-- Запоминаем изменения
	COMMIT TRANSACTION T1

	-- Выбрать все данные из таблицы
	SELECT * FROM Товары

В данном примере после операторов BEGIN TRANSACTION и COMMIT TRANSACTION 
указывается имя T1 и T2. Таким образом, мы идентифицируем транзакции и 
завершаем их в обратном порядке объявлению. 

----

Откат транзакции до точки
=========================

Но как же тогда можно откатывать транзакции до определенной точки? 
В MS SQL достаточно просто и вложенные транзакции тут не причем. 
Для этого нужно просто поставить точку сохранения с помощью оператора 
SAVE TRAN, который имеет следующий вид:

.. code-block:: sql

	SAVE TRAN [SACTION] { savepoint_name | @savepoint_variable }
	
Пример:

.. code-block:: sql

	-- Начинаем транзакцию 1
	BEGIN TRANSACTION T1

	-- Вставляем строку данных в таблицу товаров
	INSERT INTO Товары (Дата, [Название товара], Цена, Количество)
		VALUES ('4.3.2005', 'МОРКОВЬ', 11.30, 1)

	-- Сохраняем транзакцию
	SAVE TRAN ins_complete

	-- Обновить данные в последней строке
	UPDATE Товары SET Цена = 14
		WHERE [Название товара] LIKE 'МОРКОВЬ'

	-- Откатываем транзакцию
	ROLLBACK TRANSACTION ins_complete

	-- Запоминаем изменения
	COMMIT TRANSACTION T1

	-- Выбрать все данные из таблицы
	SELECT * FROM Товары	

----

Блокировка таблиц
=================

Одновременный доступ нескольких клиентов к хранилищу данных может приводить к ошибкам различного типа. 
Например, одновременное чтение одним клиентом и запись другим клиентом одной и той же строки таблицы с большой вероятностью приведет к сбою или чтению некорректных данных. 

Механизмы блокировок позволяют избежать ситуаций одновременного доступа к данным, регламентируя механизм взаимодействия пользователей между собой.

MySQL от имени одного из клиентов накладывает блокировку на определенный ресурс, при этом другие клиенты ждут освобождения блокировки. 

.. Блокировка может быть на уровне таблиц (блокируется таблица) или на уровне строк (блокируются определенные строки таблицы).

Блокировки бывают двух видов: на чтение и на запись.

1. Если A хочет читать данные, то другие клиенты тоже могут читать данные, но никто не может записывать, пока А не закончит чтение (read lock).
2. Если А хочет записать данные, то другие клиенты не должны ни читать ни писать эти данные пока А не закончит (write lock).

----

Явная блокировка
================

Для явной блокировки применяются команды:

.. code-block:: sql

    -- блокрировка
    LOCK TABLES 
            tbl_name [AS alias] {READ | [READ LOCAL] | [LOW_PRIORITY] WRITE}
            [, tbl_name {READ | [LOW_PRIORITY] WRITE} ...]
    ...
    -- снятие блокировки
    UNLOCK TABLES

Типы блокировок:

1. **READ** — блокирует таблицу для чтения. Все клиенты могут получать данные одновременно, но никто не может их изменять, даже тот клиент, который установил блокировку.

2. **WRITE** — блокирует таблицу для записи. Только клиент установивший блокировку может получать и изменять данные.

3. **READ LOCAL** — блокирует таблицу для чтения, но позволяет осуществлять вставку данных (INSERT). Применимо только к таблицам MyISAM, которые не имеют дыр, образованных в результате изменения или удаления строк.

4. **LOW_PRIORITY WRITE** — блокирует таблицу для записи, но во время ожидания блокировки пропускает тех клиентов, которые стоят в очереди на получения блокировки типа READ. Во время ожидания блокировки, новые поступающие запросы на блокировку типа READ также пропускаются вперед, что может потенциально привести к тому, что запись не будет произведена никогда (если всегда есть клиенты в очереди на чтение).

----

Пример блокировки таблицы
=========================

Пример блокировки двух таблиц: trans на чтение, customer - на запись.

.. code-block:: sql

    -- установка блокировки
    LOCK TABLES trans READ, customer WRITE;

    -- чтение данных из trans
    SELECT SUM(value) FROM trans WHERE customer_id=some_id;
    
    -- обновление данных в customer
    UPDATE customer SET total_value=sum_from_previous_statement
            WHERE customer_id=some_id;
    
    -- снятие блокировки
    UNLOCK TABLES;

----

Проблемы параллельного доступа
==============================

При параллельном выполнении транзакций возможны следующие проблемы:

1. Потерянное обновление (англ. lost update) — при одновременном изменении одного блока данных разными транзакциями одно из изменений теряется;

2. «Грязное» чтение (англ. dirty read) — чтение данных, добавленных или изменённых транзакцией, которая впоследствии не подтвердится (откатится);

3. Неповторяющееся чтение (англ. non-repeatable read) — при повторном чтении в рамках одной транзакции ранее прочитанные данные оказываются изменёнными;

4. Фантомное чтение (англ. phantom reads) — одна транзакция в ходе своего выполнения несколько раз выбирает множество строк по одним и тем же критериям. Другая транзакция в интервалах между этими выборками добавляет или удаляет строки или изменяет столбцы некоторых строк, используемых в критериях выборки первой транзакции, и успешно заканчивается. В результате получится, что одни и те же выборки в первой транзакции дают разные множества строк.

----

Потерянное обновление
=====================

Ситуация, когда при одновременном изменении одного блока данных разными транзакциями одно из изменений теряется.

Предположим, имеются две транзакции, выполняемые одновременно:

Транзакция 1	                             
------------
         
.. code-block:: sql

    UPDATE tbl1 SET f2=f2+20 WHERE f1=1;	

Транзакция 2
------------

.. code-block:: sql
    
    UPDATE tbl1 SET f2=f2+25 WHERE f1=1;

..

    
    В результате значение поля f2 по завершении обеих транзакций может увеличиться не на 45, а на 20 или 25, то есть одна из изменяющих данные транзакций «пропадёт».

----

«Грязное» чтение
================

Чтение данных, добавленных или изменённых транзакцией, которая впоследствии не подтвердится (откатится).
Предположим, имеются две транзакции, открытые различными приложениями, в которых выполнены следующие SQL-операторы:

Транзакция 1	
------------

.. code-block:: sql

    -- #2
    UPDATE tbl1 SET f2=f2+1 WHERE f1=1;	
    -- #4
    ROLLBACK WORK;	

Транзакция 2
------------

.. code-block:: sql

    -- #1
    SELECT f2 FROM tbl1 WHERE f1=1;
    -- #3 
    SELECT f2 FROM tbl1 WHERE f1=1;

..

    В транзакции 1 изменяется значение поля f2, а затем в транзакции 2 выбирается значение этого поля. После этого происходит откат транзакции 1. В результате значение, полученное второй транзакцией, будет отличаться от значения, хранимого в базе данных.

----

Неповторяющееся чтение
======================

Ситуация, когда при повторном чтении в рамках одной транзакции ранее прочитанные данные оказываются изменёнными.
Предположим, имеются две транзакции, открытые различными приложениями, в которых выполнены следующие SQL-операторы:

Транзакция 1	
------------

.. code-block:: sql

    -- #2
    UPDATE tbl1 SET f2=f2+1 WHERE f1=1;	
    COMMIT;	

Транзакция 2
------------

.. code-block:: sql

    -- #1
    SELECT f2 FROM tbl1 WHERE f1=1;

    -- #3
    SELECT f2 FROM tbl1 WHERE f1=1;

..

    В транзакции 2 выбирается значение поля f2, затем в транзакции 1 изменяется значение поля f2. При повторной попытке выбора значения из поля f2 в транзакции 2 будет получен другой результат. Эта ситуация особенно неприемлема, когда данные считываются с целью их частичного изменения и обратной записи в базу данных.

----

Фантомное чтение
================

Ситуация, когда при повторном чтении в рамках одной транзакции одна и та же выборка дает разные множества строк.
Предположим, имеется две транзакции, открытые различными приложениями, в которых выполнены следующие SQL-операторы:

Транзакция 1	
------------

.. code-block:: sql

    -- #2
    INSERT INTO tbl1 (f1,f2) VALUES (15,20);	
    -- #3
    COMMIT;	

Транзакция 2
------------
    
.. code-block:: sql

    -- #1
    SELECT SUM(f2) FROM tbl1;
    -- #4
    SELECT SUM(f2) FROM tbl1;

..

    В транзакции 2 выполняется SQL-оператор, использующий все значения поля f2. Затем в транзакции 1 выполняется вставка новой строки, приводящая к тому, что повторное выполнение SQL-оператора в транзакции 2 выдаст другой результат. Такая ситуация называется фантомным чтением. От неповторяющегося чтения оно отличается тем, что результат повторного обращения к данным изменился не из-за изменения/удаления самих этих данных, а из-за появления новых (фантомных) данных.

----

Уровни изоляции
===============

Под «уровнем изоляции транзакций» понимается степень обеспечиваемой внутренними механизмами СУБД (то есть не требующей специального программирования) защиты от всех или некоторых видов вышеперечисленных несогласованностей данных, возникающих при параллельном выполнении транзакций. 

Стандарт SQL-92 определяет шкалу из четырёх уровней изоляции: 

1. Read uncommitted
2. Read committed
3. Repeatable read
4. Serializable.

----

Уровни изоляции
===============
Read uncommitted (чтение незафиксированных данных)
--------------------------------------------------

Низший (нулевой) уровень изоляции. Он гарантирует только отсутствие потерянных обновлений

Read committed (чтение фиксированных данных)
--------------------------------------------

На этом уровне обеспечивается защита от чернового, «грязного» чтения, тем не менее, в процессе работы одной транзакции другая может быть успешно завершена и сделанные ею изменения зафиксированы. 

Repeatable read (повторяемость чтения)
--------------------------------------

Уровень, при котором читающая транзакция «не видит» изменения данных, которые были ею ранее прочитаны. При этом никакая другая транзакция не может изменять данные, читаемые текущей транзакцией, пока та не окончена.

Serializable (упорядочиваемость)
--------------------------------

Самый высокий уровень изолированности; транзакции полностью изолируются друг от друга, каждая выполняется так, как будто параллельных транзакций не существует. Только на этом уровне параллельные транзакции не подвержены эффекту «фантомного чтения».

----

Установка уровня изоляции
=========================

Устанавливает уровень изоляции транзакций команда **SET**:.

.. code-block:: sql

    SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL
        { READ UNCOMMITTED | READ COMMITTED | 
          REPEATABLE READ | SERIALIZABLE }

По умолчанию уровень изоляции устанавливается для последующей (не начальной) 
транзакции. 

При использовании ключевого слова GLOBAL данная команда устанавливает уровень 
изоляции по умолчанию глобально для всех новых соединений, созданных от этого 
момента. 

Однако для того чтобы выполнить данную команду, необходима привилегия SUPER. 

При использовании ключевого слова SESSION устанавливается уровень изоляции по
 умолчанию для всех будущих транзакций, выполняемых в текущем соединении.

----

Уровень изолированности в MS SQL
================================

Уровень изолированности транзакций может быть установлен непосредственно в операциях изменения данных:

.. code-block:: sql

	UPDATE <имя таблицы> WITH (<уровень блокировки>, <тип блокировки>)

Поддерживаются следующие уровни блокировки:

* ROWLOCK — блокировка на уровне строк;
* PAGLOCK — блокировка на уровне страниц;
* TABLOCK — блокировка на уровне таблиц.

Можно задавать следующие типы блокировок:

* NOLOCK — минимальный уровень изоляции с разрешением чтения «грязных» данных;
* XLOCK — монопольная блокировка;
* SERIALIZABLE — инструкции не могут считывать данные, которые были изменены другими транзакциями, но еще не были зафиксированы; другие транзакции не могут изменять данные, считываемые текущей транзакцией, до ее завершения; другие транзакции не могут вставлять новые строки со значениями ключа, которые входят в диапазон ключей, считываемых инструкциями текущей транзакции, до ее завершения;
* READ UNCOMMITED — указывает, что инструкции могут считывать строки, которые были изменены другими транзакциями, но еще не были зафиксированы;
* READ COMMITED — указывает, что инструкции не могут считывать данные, которые были изменены другими транзакциями, но еще не были зафиксированы.

Пример:

.. code-block:: sql

	UPDATE Exemplar WITH (TABLOCK, XLOCK)
		SET Data_return = data_return + 14
		WHERE Data_Return IS NOT Null AND Data_In > Getdate() - 14


----


Полезные ссылки
===============

- `Что такое транзакции?`_

- `Управление транзакциями в современных реляционных СУБД`_

- `Команды управления транзакциями и блокировками в MySQL`_

- `ACID`_

- `Блокировки в MySQL`_

- `На пути к правильным SQL транзакциям`_

- `SQL Server Isolation Levels By Example`_


.. _Что такое транзакции?: https://www.eduonix.com/blog/database/sql-transaction-control-language-tcl/

.. _Управление транзакциями в современных реляционных СУБД: http://web.znu.edu.ua/lab/econom/dba/lectures/ADBS_lect6.pdf

.. _Команды управления транзакциями и блокировками в MySQL: Команды управления транзакциями и блокировками в MySQL

.. _ACID: https://ru.wikipedia.org/wiki/ACID

.. _Блокировки в MySQL: http://habrahabr.ru/post/46542/

.. _На пути к правильным SQL транзакциям: https://habrahabr.ru/company/infopulse/blog/261097/

.. _SQL Server Isolation Levels By Example: http://gavindraper.com/2012/02/18/sql-server-isolation-levels-by-example/
